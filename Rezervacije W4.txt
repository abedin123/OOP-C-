#include<iostream>
using namespace std;

char * AlocirajNizKaraktera(const char * sadrzaj) {
	if (sadrzaj == nullptr)
		return nullptr;
	int vel = strlen(sadrzaj) + 1;
	char * temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);
	return temp;
}

class Datum
{
	int _dan;
	int _mjesec;
	int _godina;
public:
	Datum()
	{
		_dan = 1;
		_mjesec = 1;
		_godina = 2000;
	}
	Datum(const Datum &d)
	{
		_dan = d._dan;
		_mjesec = d._mjesec;
		_godina = d._godina;
	}
	Datum(int d, int m, int g) : _dan(d), _mjesec(m), _godina(g) {}
	void Info()
	{
		cout << _dan << "." << _mjesec << "." << _godina << endl;
	}
	void operator=(Datum d)
	{
		_dan = d._dan;
		_mjesec = d._mjesec;
		_godina = d._godina;
	}
	bool DatumVeci(Datum d)
	{
		if (d._godina > _godina)
			return true;
		if (d._godina == _godina)
		{
			if (d._mjesec > _mjesec)
				return true;
			if (d._mjesec == _mjesec)
			{
				if (d._dan > _dan)
					return true;
				else
					return false;
			}
		}
	}
	bool operator==(const Datum d)
	{
		if (_dan == d._dan&&_mjesec == d._mjesec&&_godina == d._godina)
			return true;
		else
			return false;
	}
};

enum TipNaplate { PoOsobi, Jednokratno, PoNocenju };
class Usluga
{
	char* _naziv;
	double _cijena;
	TipNaplate _tipNaplate;
public:
	Usluga(Usluga &us)
	{
		int size = strlen(us._naziv) + 1;
		_naziv = new char[size];
		strcpy_s(_naziv, size, us._naziv);

		_cijena = us._cijena;
		_tipNaplate = us._tipNaplate;
	}
	Usluga() : _naziv(nullptr), _cijena(0), _tipNaplate(TipNaplate(0)) {}
	Usluga(const char* naziv, double cijena, TipNaplate tipNaplate) :
		_cijena(cijena), _tipNaplate(tipNaplate)
	{
		_naziv = AlocirajNizKaraktera(naziv);
	}

	~Usluga()
	{
		if (_naziv != nullptr)
		{
			delete[] _naziv;
			_naziv = nullptr;
		}
	}
	void operator=(const Usluga&u)
	{
		int size = strlen(u._naziv) + 1;
		_naziv = new char[size];
		strcpy_s(_naziv, size, u._naziv);

		_cijena = u._cijena;
		_tipNaplate = u._tipNaplate;
	}
	void Info()
	{
		cout << "Naziv usluge: " << _naziv << endl;
		cout << "Cijena: " << _cijena << endl;
	}
};

enum TipSmjestaja { StudioApartman, SingleRoom, DoubleRoom, SuperiorApartman };
const char* TipSmjestajaString[] = { "StudioApartman", "SingleRoom", "DoubleRoom", "SuperiorApartman" };


class Smjestaj
{
	int _broj; //Broj sobe, apartmana
	TipSmjestaja* _tipSmjestaja;
	int _maxBrojOsoba;
	double _cijenaPoOsobi;
public:
	Smjestaj(Smjestaj &s)
	{
		_broj = s._broj;
		_tipSmjestaja = new TipSmjestaja(*s._tipSmjestaja);
		_maxBrojOsoba = s._maxBrojOsoba;
		_cijenaPoOsobi = s._cijenaPoOsobi;
	}
	Smjestaj() :_broj(BrojSmjestaja())
	{
		_tipSmjestaja = nullptr;
	}
	Smjestaj(int broj, TipSmjestaja tip, int maxBrojOsoba, double cijenaPoOsobi) :
		_broj(broj), _tipSmjestaja(new TipSmjestaja(tip)), _maxBrojOsoba(maxBrojOsoba), _cijenaPoOsobi(cijenaPoOsobi)
	{
	}

	~Smjestaj()
	{
		if (_tipSmjestaja != nullptr)
		{
			delete _tipSmjestaja;
			_tipSmjestaja = nullptr;
		}
	}

	void Info() const
	{
		cout << "Broj sobe: " << _broj << endl;
		cout << "Tip smjestaja: " << TipSmjestajaString[*_tipSmjestaja] << endl;
		cout << "Kapacitet smjestaja: " << _maxBrojOsoba << endl;
		cout << "Cijena po osobi: " << _cijenaPoOsobi << endl;

	}
	int BrojSmjestaja()const { return _broj; }
	void  operator=(const Smjestaj &s)
	{
		_broj = s._broj;
		_maxBrojOsoba = s._maxBrojOsoba;
		_cijenaPoOsobi = s._cijenaPoOsobi;
		_tipSmjestaja = new TipSmjestaja(*s._tipSmjestaja);
	}
	int maxOsoba() { return _maxBrojOsoba; }
	bool operator==(const Smjestaj &s)
	{
		if (_tipSmjestaja == s._tipSmjestaja)
			return true;
	}
};

class Gost
{
	char* _imePrezime;
	char* _kontakTelefon;
public:
	Gost()
	{
		_imePrezime = new char[4];
		strcpy_s(_imePrezime, 4, "---");
		_kontakTelefon = new char[4];
		strcpy_s(_kontakTelefon, 4, "---");
	}
	Gost(const char* imePrezime, const char* kontaktTelefon)
	{
		_imePrezime = AlocirajNizKaraktera(imePrezime);

		_kontakTelefon = AlocirajNizKaraktera(kontaktTelefon);
	}
	Gost(const Gost &g)
	{
		int size = strlen(g._imePrezime) + 1;
		_imePrezime = new char[size];
		strcpy_s(_imePrezime, size, g._imePrezime);

		size = strlen(g._kontakTelefon) + 1;
		_kontakTelefon = new char[size];
		strcpy_s(_kontakTelefon, size, g._kontakTelefon);
	}
	~Gost()
	{
		cout << "Pozvana" << endl;
		if (_imePrezime != nullptr)
		{
			delete[]_imePrezime;
			_imePrezime = nullptr;
		}
		if (_kontakTelefon != nullptr)
		{
			delete[]_kontakTelefon;
			_kontakTelefon = nullptr;
		}

	}
	void Info()
	{
		if (_imePrezime != nullptr)
			cout << "Ime i prezime: " << _imePrezime << endl;
		if (_kontakTelefon != nullptr)
			cout << "Kontakt telefon: " << _kontakTelefon << endl;
	}
	void operator=(Gost &g)
	{
		int size = strlen(g._imePrezime) + 1;
		_imePrezime = new char[size];
		strcpy_s(_imePrezime, size, g._imePrezime);

		size = strlen(g._kontakTelefon) + 1;
		_kontakTelefon = new char[size];
		strcpy_s(_kontakTelefon, size, g._kontakTelefon);
	}
	bool operator==(Gost &g)
	{
		if (strcmp(_imePrezime, g._imePrezime) == 0 && strcmp(_kontakTelefon, g._kontakTelefon) == 0)
			return true;
		else
			return false;
	}
};

enum StatusRezervacije { Aktivna, Potvrdjena, BoravakUToku, Otkazana };
const char *StatusRez[] = { "Aktivna","Potvrdjena","BoravakUToku","Otkazana" };
class Rezervacija
{
	Datum _pocetakBoravka;
	Datum _krajBoravka;
	Gost* _gost; //Gost koji je rezervisao smještaj
	Smjestaj _smjestaj;
	int _brojOsoba; //Ukupan broj osoba koji boravi u smjestaju
	Usluga* _usluge; //Dodatne usluge koje je gost koristio tokom boravka
	int _brojUsluga;
	double _ukupanIznos;
	StatusRezervacije _status;
public:
	Rezervacija()
	{
		Datum d(1, 1, 2000);
		_pocetakBoravka = d;
		_krajBoravka = d;
		_gost = nullptr;
		_usluge = nullptr;
	}
	Rezervacija(const Rezervacija &r)
	{
		_pocetakBoravka = r._pocetakBoravka;
		_krajBoravka = r._krajBoravka;
		_gost = new Gost(*r._gost);
		_smjestaj = r._smjestaj;
		_brojOsoba = r._brojOsoba;
		_usluge = new Usluga[r._brojUsluga];
		for (int i = 0; i < r._brojUsluga; i++)
		{
			_usluge[i] = r._usluge[i];
		}
		_brojUsluga = r._brojUsluga;
		_ukupanIznos = r._ukupanIznos;
		_status = r._status;
	}
	Rezervacija(Datum d, Datum d1, Gost &gost, Smjestaj smjestaj, int brojosoba) {
		_pocetakBoravka = d;
		_krajBoravka = d1;

		_gost = new Gost(gost);

		_smjestaj = smjestaj;
		_brojOsoba = brojosoba;
	}
	~Rezervacija()
	{
		if (_gost != nullptr)
		{
			delete _gost;
			_gost = nullptr;
		}
		if (_usluge != nullptr)
		{
			delete[]_usluge;
			_usluge = nullptr;
		}
	}
	void RezervisiUslugu(const Usluga& u)
	{
		Usluga* temp = new Usluga[_brojUsluga + 1];
		for (size_t i = 0; i < _brojUsluga; i++)
		{
			temp[i] = _usluge[i];
		}

		delete[] _usluge;
		_usluge = temp;

		_usluge[_brojUsluga++] = u;
	}
	void Info()
	{
		cout << "Datum pocetka boravka"; _pocetakBoravka.Info(); cout << endl;
		cout << "Datum kraja boravka"; _krajBoravka.Info(); cout << endl;
		cout << "Gost koji je rezervisao smjestaj:"; _gost->Info(); cout << endl;
		cout << "Smjestaj je:"; _smjestaj.Info(); cout << endl;
		cout << "Usluge smjestaja su:" << endl;
		for (int i = 0; i < _brojUsluga; i++)
			_usluge[i].Info();
		cout << "Ukupan iznos rezervacije je:" << _ukupanIznos << endl;
		cout << "Status rezervacije je:" << StatusRez[_status] << endl;
	}
	Datum krajBoravka() {
		return _krajBoravka;
	}
	Datum pocetakBoravka()
	{
		return _pocetakBoravka;
	}
	int brojOsoba() { return _brojOsoba; }
	Smjestaj smjestaj() {
		return _smjestaj;
	}
	void operator=(Rezervacija &r)
	{
		_pocetakBoravka = r.pocetakBoravka();
		_krajBoravka = r.krajBoravka();
		_gost = new Gost(*r._gost);
		_smjestaj = r.smjestaj();
		_brojOsoba = r.brojOsoba();
		_usluge = new Usluga[r._brojUsluga + 1];
		for (int i = 0; i < r._brojUsluga; i++)
		{
			_usluge[i] = r._usluge[i];
		}
		_brojUsluga = r._brojUsluga;
		_ukupanIznos = r._ukupanIznos;
		_status = r._status;
	}
	StatusRezervacije Status()const { return _status; }
	void PromijeniStatus(StatusRezervacije s) { _status = s; }
	bool operator==(const Rezervacija r)
	{
		if (_pocetakBoravka == r._pocetakBoravka&&_krajBoravka == r._krajBoravka)
		{
			if (_gost == r._gost)
				return true;
		}
		else
			return false;
	}
	Gost gost() { return *_gost; }
	int BrojUsluga() { return _brojUsluga; }
	Usluga *usluge() { return _usluge; }
	int UkupanIznos() { return _ukupanIznos; }
};

class Hotel
{
	char* _naziv;
	Smjestaj* _smjestaji;
	int _brojSmjestaja;
	Rezervacija* _rezervacije;
	int _brojRezervacija;
	static int _stopaPDV;
public:
	Hotel()
	{
		_naziv = new char[4];
		strcpy_s(_naziv, 4, "---");

		_smjestaji = nullptr;

		_rezervacije = nullptr;
	}
	Hotel(const Hotel &h)
	{
		int size = strlen(h._naziv) + 1;
		_naziv = new char[size];
		strcpy_s(_naziv, size, h._naziv);
		_smjestaji = new Smjestaj[h._brojSmjestaja];
		for (int i = 0; i < h._brojSmjestaja; i++)
		{
			_smjestaji[i] = h._smjestaji[i];
		}
		_brojRezervacija = h._brojRezervacija;
		_brojSmjestaja = h._brojSmjestaja;
		_stopaPDV = h._stopaPDV;
	}
	Hotel(const char* naziv) : _smjestaji(nullptr), _brojSmjestaja(0),
		_rezervacije(nullptr), _brojRezervacija(0)
	{
		_naziv = AlocirajNizKaraktera(naziv);
	}
	~Hotel()
	{
		if (_naziv != nullptr)
		{
			delete[]_naziv;
			_naziv = nullptr;
		}
		if (_smjestaji != nullptr)
		{
			delete[]_smjestaji;
			_smjestaji = nullptr;
		}
		if (_rezervacije != nullptr)
		{
			delete[]_rezervacije;
			_rezervacije = nullptr;
		}
	}
	bool DodajSmjestaj(Smjestaj &s)
	{
		for (int i = 0; i < _brojSmjestaja; i++)
		{
			if (_smjestaji[i].BrojSmjestaja() == s.BrojSmjestaja())
			{
				cout << "Ne mozete dodati dva smjestaja na isti broj." << endl;
				return false;
			}
		}
		Smjestaj *temp = new Smjestaj[_brojSmjestaja + 1];
		for (int i = 0; i < _brojSmjestaja; i++)
		{
			temp[i] = _smjestaji[i];
		}
		delete[]_smjestaji;
		_smjestaji = temp;
		_smjestaji[_brojSmjestaja] = s;
		_brojSmjestaja++;
		return true;
	}
	void Info()
	{
		cout << "Naziv hotela je:" << _naziv << endl;
		cout << "Smjestaji su:" << endl;
		for (int i = 0; i < _brojSmjestaja; i++)
			_smjestaji[i].Info();
		cout << "Rezervacije su:" << endl;
		for (int i = 0; i < _brojRezervacija; i++)
			_rezervacije[i].Info();
	}
	bool DodajRezervaciju(Rezervacija r)
	{
		for (int i = 0; i < _brojRezervacija; i++)
		{
			if (_rezervacije[i].krajBoravka().DatumVeci(r.pocetakBoravka()) != true)
			{
				cout << "Ovaj smjestaj je izdat u ovom periodu." << endl;
				return false;
			}
		}
		for (int i = 0; i < _brojRezervacija; i++)
		{
			for (int i = 0; i < _brojSmjestaja; i++)
			{
				if (_smjestaji[i].operator==(r.smjestaj()))
				{
					if (_smjestaji[i].maxOsoba() < r.brojOsoba())
					{
						cout << "Ne mozete dodati rezervaciju jer je broj osoba prevelik." << endl;
						return false;
					}
				}
			}
		}
		Rezervacija *temp = new Rezervacija[_brojRezervacija + 1];
		for (int i = 0; i < _brojRezervacija; i++)
		{
			temp[i] = _rezervacije[i];
		}
		delete[]_rezervacije;
		_rezervacije = temp;
		_rezervacije[_brojRezervacija] = r;
		cout << StatusRez[_rezervacije[_brojRezervacija].Status()] << endl;
		_brojRezervacija++;
		return true;
	}
	void PotvrdiRezervaciju(Rezervacija &r)
	{
		for (int i = 0; i < _brojRezervacija; i++)
		{
			if (_rezervacije[i] == r)
			{
				r.PromijeniStatus(Potvrdjena);
				cout << "Status rezervacije je POTVRDJENO." << endl;
			}
		}
	}
	void CheckIn(Rezervacija &r)
	{
		for (int i = 0; i < _brojRezervacija; i++)
		{
			if (_rezervacije[i] == r)
			{
				if (_rezervacije[i].Status() == Potvrdjena)
				{
					_rezervacije[i].PromijeniStatus(BoravakUToku);
					cout << "Status rezervacije je BORAVAK U TOKU." << endl;
				}
			}
		}
	}
	void CheckOut(Rezervacija r, bool Uzpdv)
	{
		cout << "Pocetak boravka:"; r.pocetakBoravka().Info(); cout << endl;
		cout << "Kraj boravka:"; r.krajBoravka().Info(); cout << endl;
		cout << "Smjestaj:"; r.smjestaj().Info(); cout << endl;
		cout << "Broj osoba za iznajmljivanje:" << r.brojOsoba() << endl;
		cout << "Ukupan iznos je:" << r.UkupanIznos() << endl;
	}
};

int main()
{

#pragma region Hotel

	const int brojUsluga(5);
	Hotel hotel1("Hotel Mostar");

	Usluga* usluge[brojUsluga];
	usluge[0] = new Usluga("Parking", 5, TipNaplate(1));
	usluge[1] = new Usluga("Dorucak", 10, TipNaplate(0));
	usluge[2] = new Usluga("Rucak", 15, TipNaplate(0));
	usluge[3] = new Usluga("Wellness & SPA", 40, TipNaplate(2));
	usluge[4] = new Usluga("Veseraj", 10, TipNaplate(2));

	Smjestaj apartman(1, TipSmjestaja(0), 5, 30);
	Smjestaj soba1(2, TipSmjestaja(1), 2, 20);
	Smjestaj soba2(3, TipSmjestaja(2), 4, 20);
	Smjestaj soba3(1, TipSmjestaja(0), 2, 15);


	hotel1.DodajSmjestaj(apartman);
	hotel1.DodajSmjestaj(soba1);
	hotel1.DodajSmjestaj(soba2);
	hotel1.DodajSmjestaj(soba3);


	for (size_t i = 0; i < brojUsluga; i++)
		usluge[i]->Info();

#pragma endregion

#pragma region RezervacijaGost1

	Gost gost1("Marija Peric", "033/222-555");
	Rezervacija rezervacija1(Datum(28, 10, 2018), Datum(2, 11, 2018), gost1, apartman, 3);
	rezervacija1.RezervisiUslugu(*usluge[0]);
	rezervacija1.RezervisiUslugu(*usluge[1]);

	if (hotel1.DodajRezervaciju(rezervacija1))
		cout << "Uspjesno ste rezervisali smjestaj." << endl;
	else
		cout << "Rezervacija smjestaja nije uspjela." << endl;

	hotel1.PotvrdiRezervaciju(rezervacija1); //Prije nego se gosti prijave u hotel rezervacija mora biti potvrdena.
	hotel1.CheckIn(rezervacija1); //Mijenja status rezervacije na BoravakUToku, pod uslovom da je ista prethodno potvrdena.


	hotel1.CheckOut(rezervacija1, true);

#pragma endregion

#pragma region RezervacijaGost2
	Gost gost2("Adijan Maric", "066/111-333");
	Rezervacija rezervacija2(Datum(29, 10, 2018), Datum(5, 11, 2018), gost2, apartman, 6);
	if (hotel1.DodajRezervaciju(rezervacija2))
		cout << "Uspjesno ste rezervisali smjestaj." << endl;
	else
		cout << "Rezervacija smjestaja nije uspjela." << endl;

#pragma endregion

	for (size_t i = 0; i < brojUsluga; i++)
	{
		delete usluge[i];
	}

	system("pause");
	return 0;
}

