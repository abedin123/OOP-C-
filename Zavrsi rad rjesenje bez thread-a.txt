#include<iostream>
#include<string>
#include<vector>
#include <exception>
#include <regex>
/****************************************************************************
1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR CE BITI OZNACENO KAO "RE"
3. SPAŠAVAJTE PROJEKAT KAKO BI SE SPRIJECILO GUBLJENJE URAÐENOG ZADATKA
4. NAZIVI FUNKCIJA, TE BROJ I TIP PARAMETARA MORAJU BITI IDENTICNI ONIMA KOJI SU KORIŠTENI U TESTNOM CODE-U, OSIM U SLUCAJU DA POSTOJI ADEKVATAN RAZLOG ZA NJIHOVU MODIFIKACIJU. OSTALE, POMOCNE FUNKCIJE MOŽETE IMENOVATI I DODAVATI PO ŽELJI.
5. IZUZETAK BACITE U FUNKCIJAMA U KOJIMA JE TO NAZNACENO.
****************************************************************************/

using namespace std;
enum Oblast { SoftverskiInzinjering, KomunikacijskiSistemi, SigurnostInformacijskihSistema, InteligentniSistemi };
const char* oblast_txt[] = { "Softverski inzinjering", "Komunikacijski sistemi", "Sigurnost informacijskih sistema", "Inteligentni sistemi" };

template<class T1, class T2, int max>
class Kolekcija {
	T1 _elementi1[max];
	T2 _elementi2[max];
	int _trenutno;
public:
	Kolekcija()
	{
		_trenutno = 0;
	}

	void AddElement(const T1& elem1, const T2& elem2)
	{
		if (_trenutno == max)
			throw exception("Dostigli ste maksimalan broj elemenata u kolekciji!");

		for (int i = 0; i < _trenutno; i++)
		{
			if (_elementi1[i] == elem1 || _elementi2[i] == elem2)
				throw exception("Nije moguce dodati duple elemente u kolekciju!");
		}

		_elementi1[_trenutno] = elem1;
		_elementi2[_trenutno++] = elem2;

	}

	T1 * getElementi1Pok()const { return _elementi1; }
	T2 * getElementi2Pok() const{ return _elementi2; }
	T1  &getElement1(int lokacija){ return _elementi1[lokacija]; }
	T2  &getElement2(int lokacija) { return _elementi2[lokacija]; }
	int getTrenutno() const{ return _trenutno; }

	friend ostream & operator<<(ostream & COUT, const Kolekcija<T1, T2, max> & obj)
	{
		for (size_t i = 0; i < obj._trenutno; i++)
		{
			COUT << obj._elementi1[i] << " " << obj._elementi2[i] << endl;
		}
		return COUT;
	}
};
//Deklaracija klase Nastavnik omogucava njeno koristenje u klasi ZavrsniRad, a definicija je data naknadno 
class Nastavnik;

class ZavrsniRad
{
	char* _nazivTeme;
	Oblast* _oblastTeme;
	string _datumPrijave; //Format: dd.MM.gggg
	//U vector pohraniti samo adresu objekta tipa Nastavnik, dakle bez alokacije nove memorije
	vector<Nastavnik*> _komisija;
	string _datumOdbrane; //Format: dd.MM.gggg (najranije 2 mjeseca od datuma prijave)
	int _ocjena;
public:
	ZavrsniRad() :_nazivTeme(nullptr), _oblastTeme(nullptr), _datumPrijave("NEMA VRIJEDNOST"), _datumOdbrane("NEMA VRIJEDNOST"), _ocjena(5)
	{ }

	ZavrsniRad(string nazivTeme, Oblast oblastTeme, string datumPrijave) : _datumPrijave(datumPrijave), _oblastTeme(new Oblast(oblastTeme))
	{
		_nazivTeme = new char[nazivTeme.size() + 1];
		strcpy_s(_nazivTeme, nazivTeme.size() + 1, nazivTeme.c_str());
	}
	ZavrsniRad(const ZavrsniRad &z)
	{
		int size = strlen(z._nazivTeme) + 1;
		_nazivTeme = new char[size];
		strcpy_s(_nazivTeme, size, z._nazivTeme);
		_oblastTeme = new Oblast(*z._oblastTeme);
		_datumOdbrane = z._datumPrijave;
		for (int i = 0; i < z._komisija.size(); i++)
		{
			_komisija[i] = z._komisija[i];
		}
		_datumOdbrane = z._datumOdbrane;
		_ocjena = z._ocjena;
	}
	void SetNazivTeme(string naziv)
	{
		int size = strlen(naziv.c_str()) + 1;
		_nazivTeme = new char[size];
		strcpy_s(_nazivTeme, size, naziv.c_str());
	}
	void SetOblast(Oblast o)
	{
		_oblastTeme = new Oblast(o);
	}
	void SetDatum(string datum)
	{
		_datumOdbrane = datum;
	}
	void SetDatumOdbrane(string datum)
	{
		_datumOdbrane = datum;
	}
	void SetOcjena(int ocjena)
	{
		_ocjena = ocjena;
	}
	void operator=(const ZavrsniRad &z)
	{
		if (_nazivTeme != nullptr)
		{
			delete[]_nazivTeme; _nazivTeme = nullptr;
			delete _oblastTeme; _oblastTeme = nullptr;
		}
		int size = strlen(z._nazivTeme) + 1;
		_nazivTeme = new char[size];
		strcpy_s(_nazivTeme, size, z._nazivTeme);
		_oblastTeme = new Oblast(*z._oblastTeme);
		_datumOdbrane = z._datumPrijave;
		for (int i = 0; i < z._komisija.size(); i++)
		{
			_komisija[i] = z._komisija[i];
		}
		_datumOdbrane = z._datumOdbrane;
		_ocjena = z._ocjena;
	}
	~ZavrsniRad()
	{
		delete[] _nazivTeme; _nazivTeme = nullptr;
		delete _oblastTeme;	_oblastTeme = nullptr;
	}

	char* GetNazivTeme() { return _nazivTeme; }
	Oblast GetOblastTeme() { return *_oblastTeme; }
	string GetDatumOdbrane() { return _datumOdbrane; }
	int GetOcjena()const { return _ocjena; }
	vector<Nastavnik*>& GetKomisija() { return _komisija; };
	Nastavnik& GetKomisijaNaLok(int lok) const{ return *_komisija[lok]; };
	bool operator==(const ZavrsniRad&z)
	{
		return *_nazivTeme == *z._nazivTeme&&*_oblastTeme == *z._oblastTeme&&_datumPrijave == z._datumPrijave;
	}
	friend ostream& operator<<(ostream& COUT, const ZavrsniRad& r);
};
class Nastavnik
{
	string _imePrezime;
	Oblast _oblastIzboraUZvanje;
	//Parametar string predstavlja broj indeksa studenta koji prijavljuje zavrsni rad kod odredjenog nastavnika
	Kolekcija<string, ZavrsniRad, 10> _teme;

public:
	Nastavnik(string imePrezime, Oblast oblastIzboraUZvanje) : _imePrezime(imePrezime), _oblastIzboraUZvanje(oblastIzboraUZvanje)
	{}

	string GetImePrezime() { return _imePrezime; }
	Oblast GetOblast() { return _oblastIzboraUZvanje; }
	Kolekcija<string, ZavrsniRad, 10>& GetTeme() { return _teme; };
	void DodajZavrsniRad(string index, string tema, Oblast o, string datum)
	{
		for (int i = 0; i < _teme.getTrenutno(); i++)
		{
			if (strcmp(_teme.getElement2(i).GetNazivTeme(), tema.c_str()) == 0)
			{
				cout << "Ne mozete dodati istu temu." << endl;
				return;
			}
		}
		if (_oblastIzboraUZvanje != o)
			throw exception("Ne mozete dodati temu nastavniku koji nema zvanje za to.");
		ZavrsniRad z(tema.c_str(),o,datum);
		_teme.AddElement(index, z);
	}
	void ZakaziOdbranuRada(string index,string datum, vector<Nastavnik*> komisija)
	{
		int brojac = 0;
		for (int j = 0; j < komisija.size(); j++)
		{
			if (_oblastIzboraUZvanje == (*komisija[j]).GetOblast())
				brojac++;
		}
		if (brojac < 2)
			throw exception("U komisiji moraju biti bar dva nastavnika iz iste oblasti za koju se rad brani.");
		for (int i = 0; i < _teme.getTrenutno(); i++)
		{
			if (_teme.getElement1(i) == index)
			{
				if (datum > _teme.getElement2(i).GetDatumOdbrane())
				{
					_teme.getElement2(i).SetDatumOdbrane(datum);
					for (int j = 0; j < komisija.size(); j++)
					{
						_teme.getElement2(i).GetKomisija().push_back(komisija[j]);
					}
					return;
				}
				else
					throw exception("Datum odbrane ne moze biti manji od datuma prijave.");
			}
		}
		throw exception("Ne postoji student sa tim brojem indexa");
	}
	bool operator()(string index, int ocjena)
	{
		for (int i = 0; i < _teme.getTrenutno(); i++)
		{
			if (_teme.getElement1(i) == index)
			{
				if (_teme.getElement2(i).GetKomisija().size() == 0)
					return false;
			}
		}
		for (int i = 0; i < _teme.getTrenutno(); i++)
		{
			if (_teme.getElement1(i) == index)
			{
				_teme.getElement2(i).SetOcjena(ocjena);
				return true;
			}
		}
	}
	friend ostream&operator<<(ostream&COUT, const Nastavnik &n)
	{
		COUT << "Ime i prezime nastavnika: " << n._imePrezime << endl;
		COUT << "Oblast zvanja: " << oblast_txt[n._oblastIzboraUZvanje] << endl;
		COUT << n._teme << endl;
		return cout;
	}
};
ostream& operator<<(ostream& COUT, const ZavrsniRad& r)
{
	COUT << "Tema rada: " << r._nazivTeme << endl;
	COUT << "Oblast teme: " << oblast_txt[*r._oblastTeme] << endl;
	COUT << "Datum prijave rada: " << r._datumPrijave << endl;
	cout << "Komisija: " << endl;
	for (int i = 0; i < r._komisija.size(); i++)
	{
		cout << "Ime i prezime:" << r._komisija[i]->GetImePrezime() << endl;
	}
	cout << "Datum odbrane: " << r._datumOdbrane << endl;
	cout << "Ocjena: " << r._ocjena << endl;
	return COUT;
}
string PronadjiNajStudenta(Nastavnik **nastavnici, int max)
{
	float suma = 0;
	int indx = 0;
	float najjnas = 0;
	for (int i = 0; i < max; i++)
	{
		for (int j = 0; j < nastavnici[i]->GetTeme().getTrenutno(); j++)
		{
			suma += nastavnici[i]->GetTeme().getElement2(j).GetOcjena();
			if (j == nastavnici[i]->GetTeme().getTrenutno() - 1)
			{
				suma /= nastavnici[i]->GetTeme().getTrenutno();
				if (suma > najjnas)
				{
					najjnas = suma;
					indx = i;
					suma = 0;
				}
				else
					suma = 0;
			}
		}
	}
	int najjocj = nastavnici[indx]->GetTeme().getElement2(0).GetOcjena();
	string index = nastavnici[indx]->GetTeme().getElement1(0);
	for (int i = 0; i < nastavnici[indx]->GetTeme().getTrenutno(); i++)
	{
		if (nastavnici[indx]->GetTeme().getElement2(i).GetOcjena() > najjocj)
		{
			najjocj = nastavnici[indx]->GetTeme().getElement2(i).GetOcjena();
			index = nastavnici[indx]->GetTeme().getElement1(i);
		}
	}
	return index;
}
void main()
{
	const int max = 4;
	Nastavnik* nastavnici[max];

	nastavnici[0] = new Nastavnik("Denis Music", SoftverskiInzinjering);
	nastavnici[1] = new Nastavnik("Zanin Vejzovic", KomunikacijskiSistemi);
	nastavnici[2] = new Nastavnik("Jasmin Azemovic", SigurnostInformacijskihSistema);
	nastavnici[3] = new Nastavnik("Emina Junuz", SoftverskiInzinjering);

	try
	{
		/*Funkcija DodajZavrsniRad ima zadatak da odredjenom nastavniku dodijeli mentorstvo na zavrsnom radu. Sprijeciti dodavanje zavrsnih radova sa
		istom temom vise puta. Nastavnik moze imati (mentorisati) samo radove iz oblasti za koju posjeduje izbor u zvanje.U slucaju da se nastavniku 
		pokusa dodati rad koji nije iz njegove oblasti funkcija treba da baci izuzetak sa odgovarajucom porukom */

		//indeks, naslov, oblast, datum prijave 
		nastavnici[0]->DodajZavrsniRad("IB130011", "Multimedijalni informacijski sistem za visoko-obrazovnu ustanovu", SoftverskiInzinjering, "01.04.2017");
		nastavnici[0]->DodajZavrsniRad("IB120051", "Sistem za podršku rada kablovskog operatera", SoftverskiInzinjering, "03.03.2017");

		nastavnici[1]->DodajZavrsniRad("IB140102", "Prakticna analiza sigurnosti bežicnih racunarskih mreža", KomunikacijskiSistemi, "22.08.2017");

		nastavnici[2]->DodajZavrsniRad("IB140002", "Primjena teorije informacija u procesu generisanja kriptografskih kljuceva", SigurnostInformacijskihSistema, "10.09.2017");

		vector<Nastavnik*> komisija;//formira se komisija
		komisija.push_back(nastavnici[0]);
		komisija.push_back(nastavnici[2]);
		komisija.push_back(nastavnici[3]);

		/*Funkcija ZakaziOdbranuRada ima zadatak da studentu sa proslijedjenim brojem indeksa zakaze odbranu zavrsnog rada sto podrazumijeva definisanje
		datuma odbrane i liste clanova komisije pred kojima ce student braniti zavrsni rad.	Odbrana rada se moze zakazati samo studentu koji je rad 
		prethodno prijavio. Komisiju trebaju ciniti najmanje 2 nastavnika koji imaju izbor u zvanje u oblasti kojoj pripada tema rada. Datum odbrane 
		ne smije biti manji od datuma prijave. U slucaju da bilo koji od navedenih uslova nije ispunjen funkcija treba	da baci izuzetak*/
		nastavnici[0]->ZakaziOdbranuRada("IB130011", "25.09.2017", komisija);
		//nastavnici[0]->ZakaziOdbranuRada("IB130111", "25.09.2017", komisija);//student sa brojem indeksa IB130111 jos uvijek nije prijavio rad

		/*Studentu sa brojem indeksa IB130011 dodjeljuje ocjenu 8 na zavrsnom radu. Uslov za dodjelu ocjene je da student posjeduje definisan datum 
		odbrane i listu clanova komisije. U zavisnosti od uspjesnosti izvrsenja, funkcija vraca true ili false*/

		if ((*nastavnici[0])("IB130011", 8))
			cout << "Uspjesno ste ocijenili zavrsni rad!" << endl;

		/*Ispisuje sve podatke o nastavniku i njegovim mentorstvima. Za clanove komisije je dovoljno ispisati samo ime i prezime.*/
		cout << *nastavnici[0] << endl;

		/*Funkcija PronadjiNajStudenta ima zadatak da pronadje broj indeksa studenta koji je na zavrsnom radu ostvario najvecu ocjenu kod nastavnika 
		koji posjeduje najvecu prosjecnu ocjenu na zavrsnim radovima. Ukoliko se kod nastavnika sa najvecom prosjecnom ocjenom pojavi vise studenata 
		sa istom ocjenom, onda funkcija vraca broj indeksa prvog pronadjenog studenta. Svim studentima koji su odbranili rad kod nastavnika sa najvecom 
		prosjecno ocjenom, u zasebnom thread.u, poslati email poruku (mail adresa: brojIndeksa@edu.fit.ba) sa sadrzajem da su svoj zavrsni rad uspjesno 
		odbranili sa vecom ili manjom ocjenom od prosjecne. Ukoliko niti jedan od nastavnika ne posjeduje evidentirano mentorstvo na zavrsnom radu, 
		funkcija vraca tekst: NIJE PRONADJEN*/

		cout << "Najsupjesniji student: " << PronadjiNajStudenta(nastavnici, max) << endl;

		//Baca izuzetak zbog neadekvatnog izbora u zvanje, odnosno oblasti
		//nastavnici[2]->DodajZavrsniRad("IB150008", "Razvoj sistema autentifikacije na osnovu biometrije glasa", InteligentniSistemi, "15.05.2017");
	}
	catch (exception& ex)
	{
		cout << "GRESKA -> " << ex.what() << endl;
	}

	for (int i = 0; i < max; i++)
	{
		delete nastavnici[i];
		nastavnici[i] = nullptr;
	}
	
	system("pause>0");
}