#include <iostream>
using namespace std;
/****************************************************************************
1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR CE BITI OZNACENO KAO "RE"
3. SPASAVAJTE PROJEKAT KAKO BI SE SPRIJECILO GUBLJENJE URADJENOG ZADATKA
4. PROGRAMSKI CODE SE TAKODJER NALAZI U FAJLU CODE_.TXT
****************************************************************************/
template<class T1, class T2>
class Kolekcija {
	T1 * _elementi1;
	T2 * _elementi2;
	int _trenutnoElemenata;
public:
	Kolekcija()
	{
		_elementi1 = nullptr;
		_elementi2 = nullptr;
		_trenutnoElemenata = 0;
	}
	Kolekcija(const Kolekcija<T1,T2>&k)
	{
		_trenutnoElemenata = k._trenutnoElemenata;
		_elementi1 = new T1[_trenutnoElemenata];
		_elementi2 = new T2[_trenutnoElemenata];
		for (int i = 0; i < _trenutnoElemenata; i++)
		{
			_elementi1[i] = k._elementi1[i];
			_elementi2[i] = k._elementi2[i];
		}
	}
	void operator=(const Kolekcija<T1, T2>&k)
	{
		_trenutnoElemenata = k._trenutnoElemenata;
		_elementi1 = new T1[_trenutnoElemenata];
		_elementi2 = new T2[_trenutnoElemenata];
		for (int i = 0; i < _trenutnoElemenata; i++)
		{
			_elementi1[i] = k._elementi1[i];
			_elementi2[i] = k._elementi2[i];
		}

	}
	void AddElement(T1 t, T2 t1)
	{
		T1*temp = new T1[_trenutnoElemenata + 1];
		T2*temp1 = new T2[_trenutnoElemenata + 1];
		for (int i = 0; i < _trenutnoElemenata; i++)
		{
			temp[i] = _elementi1[i];
			temp1[i] = _elementi2[i];
		}
		delete[]_elementi1; delete[]_elementi2;
		_elementi1 = temp; _elementi2 = temp1;
		_elementi1[_trenutnoElemenata] = t;
		_elementi2[_trenutnoElemenata] = t1;
		_trenutnoElemenata++;
	}
	void RemoveElement(int index)
	{
		T1*temp = new T1[_trenutnoElemenata - 1];
		T2*temp1 = new T2[_trenutnoElemenata - 1];
		int j = 0;
		for (int i = 0; i < _trenutnoElemenata; i++)
		{
			if (i != index)
			{
				temp[j] = _elementi1[i];
				temp1[j] = _elementi2[i];
				j++;
			}
		}
		delete[]_elementi1; delete[]_elementi2;
		_elementi1 = temp; _elementi2 = temp1;
		_trenutnoElemenata--;
	}
	int getTrenutno()const { return _trenutnoElemenata; }
	T2 GetElement2(int ind) { return _elementi2[ind]; }
	T1 GetElement1(int ind) { return _elementi1[ind]; }
	void SetElement2(T2 vr,int ind) {
		_elementi2[ind] = vr;
	}
	void SetElement1(T1 vr, int ind)
	{
		_elementi1[ind] = vr;
	}
	friend ostream& operator<<<>(ostream &cout, Kolekcija<T1, T2>&k);
};
template<class T1, class T2>
ostream& operator<<<>(ostream &cout, Kolekcija<T1, T2>&k) {
	for (int i = 0; i < k._trenutnoElemenata; i++)
	{
		cout << k._elementi1[i] << endl;
		cout << k._elementi2[i] << endl;
	}
	return cout;
}
class Datum {
	int *_dan, *_mjesec, *_godina;
public:
	Datum(int dan = 1, int mjesec = 1, int godina = 2000) {
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);
	}
	Datum(const Datum&d)
	{
		_dan = new int(*d._dan);
		_mjesec = new int(*d._mjesec);
		_godina = new int(*d._godina);
	}
	void operator=(const Datum &d)
	{
		if (_dan != nullptr)
			delete _dan; _dan = nullptr;
		_dan = new int(*d._dan);
		if (_mjesec != nullptr)
			delete _mjesec; _mjesec = nullptr;
		_mjesec = new int(*d._mjesec);
		if (_godina != nullptr)
			delete _godina; _godina = nullptr;
		_godina = new int(*d._godina);
	}
	bool operator==(Datum &d)
	{
		if (*_dan == *d._dan&&*_mjesec == *d._mjesec&&*_godina == *d._godina)
			return true;
		return false;
	}
	~Datum() {
		delete _dan; _dan = nullptr;
		delete _mjesec; _mjesec = nullptr;
		delete _godina; _godina = nullptr;
	}
	friend ostream& operator<< (ostream &COUT, Datum &obj) {
		COUT << *obj._dan << " " << *obj._mjesec << " " << *obj._godina;
		return COUT;
	}
};

class Student {
	char * _imePrezime;
	Datum * _datumRodjenja;
public:
	Student(const char * imePrezime = "---", Datum d = Datum()) {
		int size = strlen(imePrezime) + 1;
		_imePrezime = new char[size];
		strcpy_s(_imePrezime, size, imePrezime);
		_datumRodjenja = new Datum(d);
	}
	Student(const Student&s)
	{
		int size = strlen(s._imePrezime) + 1;
		_imePrezime = new char[size];
		strcpy_s(_imePrezime, size, s._imePrezime);
		_datumRodjenja = new Datum(*s._datumRodjenja);
	}
	void operator=(const Student &s)
	{
		if (_imePrezime != nullptr)
			delete[]_imePrezime; _imePrezime = nullptr;
		if (_datumRodjenja != nullptr)
			delete _datumRodjenja; _datumRodjenja = nullptr;
		int size = strlen(s._imePrezime) + 1;
		_imePrezime = new char[size];
		strcpy_s(_imePrezime, size, s._imePrezime);
		_datumRodjenja = new Datum(*s._datumRodjenja);
	}
	bool operator==(Student &s)
	{
		if (strcmp(_imePrezime, s._imePrezime) == 0 && *_datumRodjenja == *s._datumRodjenja)
			return true;
		return false;
	}
	~Student() { delete[] _imePrezime; delete _datumRodjenja; }
	friend ostream& operator<<(ostream &cout, Student &s);
}; 
ostream& operator<<(ostream &cout, Student &s)
{
	cout << "Ime studenta:" << s._imePrezime << endl;
	cout << "Datum rodjenja studenta:" << *s._datumRodjenja << endl;
	return cout;
}
class Ispit{
	Datum _datumOdrzavanja;
	char * _opisIspita;
	Kolekcija<Student, Datum> _prijave;
	Kolekcija<Student, int> _rezultati;
public:
	Ispit(const char*naziv, Datum &d)
	{
		int size = strlen(naziv) + 1;
		_opisIspita = new char[size];
		strcpy_s(_opisIspita, size, naziv);
		_datumOdrzavanja = d;
	}
	Ispit(const Ispit&i)
	{
		_datumOdrzavanja = i._datumOdrzavanja;
		int size = strlen(i._opisIspita) + 1;
		_opisIspita = new char[size];
		strcpy_s(_opisIspita, size, i._opisIspita);
		_prijave = i._prijave;
		_rezultati = i._rezultati;
	}
	bool DodajPrijavu(Student &s, Datum &d)
	{
		for (int i = 0; i < _prijave.getTrenutno(); i++)
		{
			if (_prijave.GetElement1(i) == s)
			{
				cout << "Ne mozete dodati istog studenta." << endl;
				return false;
			}
		}
		_prijave.AddElement(s, d);
	}
	~Ispit()
	{
		delete[]_opisIspita; _opisIspita = nullptr;
	}
	bool DodajRezultat(Student &s, int ocjena)
	{
		for (int i = 0; i < _prijave.getTrenutno(); i++)
		{
			if (_prijave.GetElement1(i) == s)
			{
				_rezultati.AddElement(s, ocjena);
				return true;
			}	
		}
		return false;
	}
	void Sortiraj() {
		bool promjena = true;
		do
		{
			promjena = false;
			for (int i = 0; i < _rezultati.getTrenutno()-1; i++)
			{
				if (_rezultati.GetElement2(i) < _rezultati.GetElement2(i + 1))
				{
					Student zamj=_rezultati.GetElement1(i);
					_rezultati.SetElement1(_rezultati.GetElement1(i + 1), i);
					_rezultati.SetElement1(zamj, i+1);
					

					int zamm = _rezultati.GetElement2(i);
					_rezultati.SetElement2(_rezultati.GetElement2(i + 1), i);
					_rezultati.SetElement2(zamm, i+1);
					promjena = true;
				}
			}
		} while (promjena);
	}
	void ZakljuciRezultate()
	{
		for (int i = 0; i < _rezultati.getTrenutno(); i++)
		{
			if (_rezultati.GetElement2(i) < 5)
				_rezultati.SetElement2(5, i);
		}
	}
	friend ostream& operator<<(ostream &cout, Ispit &i);
};
ostream& operator<<(ostream &cout, Ispit &j) {
		cout << j._prijave << endl;
		cout << j._rezultati << endl;
	return cout;
}
const char *crt = "\n--------------------------------------------------\n";
int main() {

	//REGIONI olaksavaju organizaciju programskog code-a, te ih mozete ukloniti ukoliko vam otezavaju preglednost

#pragma region TestiranjeKolekcije
	Kolekcija<int, double> kolekcija1;
	for (size_t i = 0; i < 5; i++)
		kolekcija1.AddElement(i, i + 0.3);
	cout << kolekcija1 << endl;
	cout << crt;
	Kolekcija<int, double> kolekcija2;
	kolekcija2 = kolekcija1;
	kolekcija1.RemoveElement(2);//UMANJITI VELICINU NIZA
	cout << kolekcija2 << crt;
	if (kolekcija1.getTrenutno() == kolekcija2.getTrenutno())
		cout << "ISTI BROJ ELEMENATA" << endl;
	Kolekcija<int, double> kolekcija3(kolekcija2);
	cout << kolekcija3 << crt;
#pragma endregion

#pragma region TestiranjeDatuma
	Datum danas(26, 11, 2015);
	Datum sutra(danas);
	Datum prekosutra;
	prekosutra = danas;
	cout << danas << endl << sutra << endl << prekosutra << crt;
#pragma endregion

#pragma region TestiranjeStudenta
	Student denis("Denis Music", Datum(26, 11, 1990));
	Student jasmin("Jasmin Azemovic", Datum(22, 11, 1990));
	Student goran;
	goran = jasmin;
	Student adel("Adel Handzic", Datum(25, 8, 1990));
	Student marija("Marija Herceg", Datum(15, 6, 1990));
#pragma endregion
	
#pragma region TestiranjeIspita
	Ispit prIII("PRIII::26.11.2015", danas);
	//DodajPrijavu - dodaje novog studenta u listu prijavljenih za ispit. onemoguciti dodavanje dva ista studenta
	if (prIII.DodajPrijavu(denis, danas))
		cout << denis << " DODAT na spisak" << endl;
	if (prIII.DodajPrijavu(jasmin, danas))
		cout << jasmin << " DODAT na spisak" << endl;
	if (prIII.DodajPrijavu(goran, danas))
		cout << goran << " DODAT na spisak" << endl;
	if (prIII.DodajPrijavu(adel, danas))
		cout << adel << " DODAT na spisak" << endl;
	if (prIII.DodajPrijavu(marija, danas))
		cout << marija << " DODAT na spisak" << endl;

	cout << crt << endl;
	/*DodajRezultat - dodaje ocjenu koju je student ostvario na ispitu. za dodavanje ocjene student je prethodno trebao biti prijavljen 
	na ispit
	*/
	prIII.DodajRezultat(denis, 7);
	prIII.DodajRezultat(jasmin, 6);
	prIII.DodajRezultat(adel, 8);
	prIII.DodajRezultat(marija, 9);

	cout << prIII << endl;
	/*Sortiraj - sortira rezultate ispita prema ocjeni*/
	prIII.Sortiraj();
	/*ZakljuciRezultate - dodaje ocjenu 5 svim studentima koji su prijavili ispit a nije im evidentirana ocjena*/
	prIII.ZakljuciRezultate();
	//rezultati ispita se smiju ispisivati jedino ukoliko su prethodno zakljuceni
	cout << prIII << crt;

	Ispit prIII_2(prIII);
	cout << prIII_2 << crt;
	system("pause>0");
	return 0;
#pragma endregion
}

