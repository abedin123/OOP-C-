
#include <iostream>
using namespace std;


/****************************************************************************
1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR CE BITI OZNACENO KAO "RE"
3. SPAŠAVAJTE PROJEKAT KAKO BI SE SPRIJECILO GUBLJENJE URAÐENOG ZADATKA
4. NAZIVI FUNKCIJA, TE BROJ I TIP PARAMETARA MORAJU BITI IDENTICNI ONIMA KOJI SU KORIŠTENI U TESTNOM CODE-U, OSIM U SLUCAJU DA POSTOJI ADEKVATAN RAZLOG ZA NJIHOVU MODIFIKACIJU. OSTALE, POMOCNE FUNKCIJE MOŽETE IMENOVATI I DODAVATI PO ŽELJI.
5. BEZ OBZIRA NA TO DA LI SU ISPITNI ZADACI URAÐENI, SVI STUDENTI KOJI SU PRISTUPILI ISPITU MORAJU PREDATI SVOJ RAD
6. ZA POTREBE TESTIRANJA, UNUTAR MAIN FUNKCIJE MOZETE DODAVATI NOVE TESTNE PODATKE
****************************************************************************/
//narednu liniju code-a ignorisite, osim u slucaju da vam bude predstavljala smetnje u radu
#pragma warning(disable:4996)

const char * crt = "\n----------------------------------------------------\n";
class Datum {
	int * _dan, *_mjesec, *_godina;
public:
	Datum()
	{
		_dan = new int(1);
		_mjesec = new int(1);
		_godina = new int(2000);
	}
	Datum(int d, int m, int g) {
		_dan = new int(d);
		_mjesec = new int(m);
		_godina = new int(g);
	}
	Datum(const Datum &d)
	{
		_dan = new int(*d._dan);
		_mjesec = new int(*d._mjesec);
		_godina = new int(*d._godina);
	}
	void operator=(const Datum&d)
	{
		_dan = new int(*d._dan);
		_mjesec = new int(*d._mjesec);
		_godina = new int(*d._godina);
	}
	~Datum() {
		delete _dan; _dan = nullptr;
		delete _mjesec; _mjesec = nullptr;
		delete _godina; _godina = nullptr;
	}
	friend ostream & operator<<(ostream & COUT, Datum obj) {
		COUT << *obj._dan << "/" << *obj._mjesec << "/" << *obj._godina << endl;
		return COUT;
	}
};

template<class T, int velicina>
class FITArray {
	T _niz[velicina];
	int _trenutno;
	bool _dozvoliDupliciranje;
public:
	//OSTALE FUNKCIJE CLANICE DEFINISATI VAN TEMPLATE KLASE
	FITArray(bool dozvoliDupliciranje = true) { _dozvoliDupliciranje = dozvoliDupliciranje; SetTrenutno (0); }
	FITArray(const FITArray<T, velicina> &fit)
	{
		for (int i = 0; i < fit._trenutno; i++)
		{
			_niz[i] = fit._niz[i];
		}
		_trenutno = fit._trenutno;
		_dozvoliDupliciranje = fit._dozvoliDupliciranje;
	}
	void operator=(const FITArray<T, velicina> &fit) {
		for (int i = 0; i < fit.GetTrenutno(); i++)
		{
			_niz[i] = fit._niz[i];
		}
		_trenutno = fit._trenutno;
		_dozvoliDupliciranje = fit._dozvoliDupliciranje;
	}
	bool operator+=(T broj)
	{
		if (_trenutno == velicina)
			return false;
		for (int i = 0; i < _trenutno; i++)
		{
			if (_niz[i] == broj)
				return false;
		}
		_niz[_trenutno] = broj;
		_trenutno++;
		return true;
	}
	void operator-=(T broj)
	{
		int j = 0;
		for (int i = 0; i < _trenutno; i++)
		{
			if (_niz[i] != broj)
			{
				_niz[j] = _niz[i];
				j++;
			}
		}
		_trenutno--;
	}
	FITArray<T,velicina> operator()(int OD, int DO)
	{
		FITArray<T, velicina> obj;
		for (int i = OD; i < DO; i++)
		{
			obj += _niz[i];
		}
		return obj;
	}
	int GetTrenutno()const { return _trenutno; }
	void SetTrenutno(int vr) { _trenutno = vr; }
	T * GetNiz() { return _niz; }
	friend ostream&operator<<<>(ostream &cout, FITArray<T, velicina> fit);
};
template<class T, int velicina>
ostream&operator<<<>(ostream &cout, FITArray<T, velicina> fit)
{
	for (int i = 0; i < fit.GetTrenutno(); i++)
	{
		cout << fit._niz[i] << endl;
	}
	return cout;
}
class PolozeniPredmet {
	char * _naziv;
	int _ocjena;
	Datum _datumPolaganja;
public:
	PolozeniPredmet()
	{
		_naziv = new char[4];
		strcpy_s(_naziv, 4, "---");
		_ocjena = 5;
		_datumPolaganja = Datum();
	}
	PolozeniPredmet(const PolozeniPredmet &p)
	{
		int size = strlen(p._naziv) + 1;
		_naziv = new char[size];
		strcpy_s(_naziv, size, p._naziv);
		_ocjena = p._ocjena;
		_datumPolaganja = p._datumPolaganja;
	}
	void operator=(const PolozeniPredmet &p)
	{
		int size = strlen(p._naziv) + 1;
		_naziv = new char[size];
		strcpy_s(_naziv, size, p._naziv);
		_ocjena = p._ocjena;
		_datumPolaganja = p._datumPolaganja;
	}
	PolozeniPredmet(Datum d, const char*predmet, int ocjena)
	{
		d = _datumPolaganja;
		int size = strlen(predmet) + 1;
		_naziv = new char[size];
		strcpy_s(_naziv, size, predmet);
		_ocjena = ocjena;
	}
	~PolozeniPredmet() { delete[] _naziv; _naziv = nullptr; }
	bool operator==(PolozeniPredmet &p)
	{
		if (strcmp(_naziv, p._naziv) == 0)
			return true;
		return false;
	}
	int GetOcjena()const { return _ocjena; }
	friend ostream & operator<<(ostream & COUT, PolozeniPredmet & obj) {
		COUT << obj._naziv << "(" << obj._ocjena << ")" << obj._datumPolaganja << endl;
		return COUT;
	}
};

class Student {
	static int _indeksCounter; //sluzi za odredjivanje narednog broja indeksa koji ce biti dodijeljen studentu, pocevsi od 160000
	const int _indeks;
	char * _imePrezime;
	FITArray<PolozeniPredmet, 40> _polozeniPredmeti;
public:
	Student(const char *imeiprezime):_indeks(_indeksCounter++)
	{
		int size = strlen(imeiprezime) + 1;
		_imePrezime = new char[size];
		strcpy_s(_imePrezime, size, imeiprezime);
	}
	~Student() {
		delete[] _imePrezime; _imePrezime = nullptr;
	}
	bool DodajPredmet(PolozeniPredmet p)
	{
		_polozeniPredmeti += p;
		return true;
	}
	void operator=(const Student &s)
	{
		_polozeniPredmeti = s._polozeniPredmeti;
		int size = strlen(s._imePrezime)+1;
		_imePrezime = new char[size];
		strcpy_s(_imePrezime, size, s._imePrezime);
	}
	float GetProsjek() {
		float prosjek = 0;
		float brojac = 0;
		for (int i = 0; i < _polozeniPredmeti.GetTrenutno(); i++)
		{
			prosjek += _polozeniPredmeti.GetNiz()[i].GetOcjena();
			brojac++;
		}
		prosjek = prosjek / brojac;
		return prosjek;
	}
	friend ostream & operator<<(ostream & COUT, Student & obj) {
		COUT << obj._indeks << " " << obj._imePrezime << endl << obj._polozeniPredmeti;
		return COUT;
	}
};
int Student::_indeksCounter = 180000;
int main() {
	const int max = 20;

	Datum jucer(20, 11, 2017), danas(21, 11, 2017), sutra(22, 11, 2017);
	cout << jucer << danas << sutra << endl;
	jucer = danas;
	cout << jucer << danas << sutra << endl;

	//parametar tipa bool odredjuje da li je u nizu dozvoljeno dupliciranje elemenata
	FITArray<int, max> nizIntegera(false);

	for (size_t i = 0; i < max - 1; i++)
		nizIntegera += i;//dodaje novog clana niza

	if (!(nizIntegera += 6))//pokusavamo dodati dupli clan niza
		cout << "Element nije dodan u niz" << endl;

	cout << crt << nizIntegera << crt; //ispisuje sve clanove niza

	nizIntegera -= 9; //uklanja clan niza sa vrijednoscu 9
	nizIntegera -= 17;
	
	FITArray<int, max> noviNizIntegera(nizIntegera);

	cout << crt << noviNizIntegera << crt;

	/*parametri odredjuju lokacije (indekse u nizu) elemenata OD - DO koje je potrebno vratiti. u slucaju da u nizu ne postoji trazeni broj 
	elemenata funkcija treba da vrati sve element od lokacije OD pa do posljednje dostupnog elementa */
	cout << "Clanovi niza od lokacije 2 do lokacije 5 su -> " << noviNizIntegera(2, 5) << crt;

	Student adel("Adel Handzic"), jasmin("Jasmin Azemovic");

	PolozeniPredmet prII(jucer, "PRII", 8), prIII(sutra, "PRIII", 7);

	adel.DodajPredmet(prII);
	adel.DodajPredmet(prIII);
	cout << adel << endl;
	//vraca prosjecnu ocjenu studenta
	cout << "Prosjecna ocjena -> " << adel.GetProsjek() << crt;

	jasmin = adel;
	cout << jasmin << endl;
	cout << "Prosjecna ocjena -> " << jasmin.GetProsjek() << crt;

	system("pause>0");
	return 0;
}