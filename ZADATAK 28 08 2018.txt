#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <thread>
#include <iterator>
using namespace std;

#pragma warning(disable:4996)
const char *crt = "\n-------------------------------------------\n";
enum eRazred { PRVI = 1, DRUGI, TRECI, CETVRTI };
const char *eRazredd[]{ "PRVI" , "DRUGI", "TRECI", "CETVRTI" };
const float minimalan_prosjek = 4.5;

char * AlocirajNizKaraktera(const char * sadrzaj) {
	if (sadrzaj == nullptr)
		return nullptr;
	int vel = strlen(sadrzaj) + 1;
	char * temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);
	return temp;
}

template<class T1, class T2>
class Kolekcija {
	T1 * _elementi1;
	T2 * _elementi2;
	int * _trenutno;
public:
	Kolekcija() {
		_elementi1 = nullptr;
		_elementi2 = nullptr;
		_trenutno = new int(0);
	}
	Kolekcija(const Kolekcija&k)
	{
		_trenutno = new int(*k._trenutno);
		_elementi1 = new T1[*_trenutno];
		_elementi2 = new T2[*_trenutno];
		for (int i = 0; i < *_trenutno; i++)
		{
			_elementi1[i] = k._elementi1[i];
			_elementi2[i] = k._elementi2[i];
		}
	}
	void operator=(const Kolekcija&k)
	{
		if (_elementi1 != nullptr)
		{
			delete[]_elementi1; delete _elementi2;
			_elementi1 = nullptr; _elementi2 = nullptr;
			delete _trenutno; _trenutno = nullptr;
		}
		_trenutno = new int(*k._trenutno);
		_elementi1 = new T1[*_trenutno];
		_elementi2 = new T2[*_trenutno];
		for (int i = 0; i < *_trenutno; i++)
		{
			_elementi1[i] = k._elementi1[i];
			_elementi2[i] = k._elementi2[i];
		}
	}
	~Kolekcija() {
		delete[]_elementi1; _elementi1 = nullptr;
		delete[]_elementi2; _elementi2 = nullptr;
		delete _trenutno; _trenutno = nullptr;
	}
	void AddElement(T1 t, T2 t1)
	{
		T1 *temp = new T1[*_trenutno + 1];
		T2 *temp1 = new T2[*_trenutno + 1];
		for (int i = 0; i < *_trenutno; i++)
		{
			temp[i] = _elementi1[i];
			temp1[i] = _elementi2[i];
		}
		delete[]_elementi1;
		delete[]_elementi2;
		_elementi1 = temp;
		_elementi2 = temp1;
		_elementi1[*_trenutno] = t;
		_elementi2[*_trenutno] = t1;
		(*_trenutno)++;
	}
	T1& getElement1(int lokacija)const { return _elementi1[lokacija]; }
	T2& getElement2(int lokacija)const { return _elementi2[lokacija]; }
	int getTrenutno() { return *_trenutno; }
	void SortOpadajuciByT2()
	{
		bool promjena = true;
		do
		{
			promjena = false;
			for (int i = 0; i < *_trenutno-1; i++)
			{
				if (_elementi2[i + 1] > _elementi2[i])
				{
					T2 zamjena;
					zamjena = _elementi2[i];
					_elementi2[i] = _elementi2[i + 1];
					_elementi2[i + 1] = zamjena;
					promjena = true;
				}
			}
		} while (promjena);
	}
	friend ostream& operator<<(ostream &COUT, const Kolekcija &obj) {
		for (size_t i = 0; i < *obj._trenutno; i++)
			COUT << obj.getElement1(i) << " " << obj.getElement2(i) << endl;
		return COUT;
	}
};

class DatumVrijeme {
	int *_dan, *_mjesec, *_godina, *_sati, *_minuti;
public:
	DatumVrijeme(int dan = 1, int mjesec = 1, int godina = 2000, int sati = 0, int minuti = 0) {
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);
		_sati = new int(sati);
		_minuti = new int(minuti);
	}
	DatumVrijeme(const DatumVrijeme&d)
	{
		_dan = new int(*d._dan);
		_mjesec = new int(*d._mjesec);
		_godina = new int(*d._godina);
		_sati = new int(*d._sati);
		_minuti = new int(*d._minuti);
	}
	void operator=(const DatumVrijeme&d)
	{
		delete _dan; delete _mjesec; delete _godina; delete _sati; delete _minuti; 
		_dan = _mjesec = _godina = _sati = _minuti = nullptr;
		_dan = new int(*d._dan);
		_mjesec = new int(*d._mjesec);
		_godina = new int(*d._godina);
		_sati = new int(*d._sati);
		_minuti = new int(*d._minuti);
	}
	~DatumVrijeme() {
		delete _dan; _dan = nullptr;
		delete _mjesec; _mjesec = nullptr;
		delete _godina; _godina = nullptr;
		delete _sati; _sati = nullptr;
		delete _minuti; _minuti = nullptr;
	}
	char *ToCharArray()
	{
		char *cijeldatum = new char[17];
		char *dodavanje = new char[5];
		_itoa_s(*_dan, dodavanje, 5, 10);
		strcpy_s(cijeldatum, 17, dodavanje);
		strcat_s(cijeldatum, 17, ".");
		_itoa_s(*_mjesec, dodavanje, 5, 10);
		strcat_s(cijeldatum, 17, dodavanje);

		strcat_s(cijeldatum, 17, ".");
		_itoa_s(*_godina, dodavanje, 5, 10);
		strcat_s(cijeldatum, 17, dodavanje);

		strcat_s(cijeldatum, 17, " ");
		_itoa_s(*_sati, dodavanje, 5, 10);
		strcat_s(cijeldatum, 17, dodavanje);

		strcat_s(cijeldatum, 17, ":");
		_itoa_s(*_minuti, dodavanje, 5, 10);
		strcat_s(cijeldatum, 17, dodavanje);


		return cijeldatum;
	}
	friend ostream& operator<< (ostream &COUT, const DatumVrijeme &obj) {
		COUT << *obj._dan << "." << *obj._mjesec << "." << *obj._godina << " " << *obj._sati << ":" << *obj._minuti << endl;
		return COUT;
	}
};

class Predmet {
	char * _naziv;
	int _ocjena;
	string _napomena;
public:
	Predmet(const char * naziv, int ocjena, string napomena = "") :_ocjena(ocjena), _napomena(napomena) {
		_naziv = AlocirajNizKaraktera(naziv);
	}
	Predmet(const Predmet&p)
	{
		_naziv = AlocirajNizKaraktera(p._naziv);
		_ocjena = p._ocjena;
		_napomena = p._napomena;
	}
	void operator=(const Predmet&p)
	{
		delete[]_naziv; _naziv = nullptr;
		_naziv = AlocirajNizKaraktera(p._naziv);
		_ocjena = p._ocjena;
		_napomena = p._napomena;
	}
	~Predmet() {
		delete[] _naziv; _naziv = nullptr;
	}
	friend ostream& operator<< (ostream &COUT, const Predmet &obj) {
		COUT << obj._naziv << " (" << obj._ocjena << ") " << obj._napomena << endl;
		return COUT;
	}
	char * GetNaziv() { return _naziv; }
	string GetNapomena() { return _napomena; }
	void DodajNapomenu(string napomena) {
		_napomena += " " + napomena;
	}
	bool operator==(const Predmet&p)
	{
		return strcmp(_naziv, p._naziv) == 0;
	}
	int GetOcjena() { return _ocjena; }
};
struct Uspjeh {
	eRazred _razred;
	//datumvrijeme se odnosi na vrijeme evidentiranja polozenog predmeta
	Kolekcija<Predmet*, DatumVrijeme> * _predmeti;
public:
	Uspjeh(eRazred razred) :_razred(razred), _predmeti(nullptr) {
	}
	Uspjeh(const Uspjeh&u)
	{
		_razred = u._razred;
		_predmeti = new Kolekcija<Predmet*, DatumVrijeme>(*u._predmeti);
	}
	void operator=(const Uspjeh&u)
	{
		if (_predmeti != nullptr)
		{
			for (int i = 0; i < _predmeti->getTrenutno(); i++)
			{
				delete _predmeti->getElement1(i);
				_predmeti->getElement1(i) = nullptr;
			}
			delete _predmeti;
			_predmeti = nullptr;
		}
		_razred = u._razred;
		_predmeti = new Kolekcija<Predmet*, DatumVrijeme>(*u._predmeti);
	}
	~Uspjeh() {
		delete _predmeti; _predmeti = nullptr;
	}
	bool AddPredmet(Predmet &p, DatumVrijeme &d)
	{
		if (_predmeti == nullptr)
		{
			_predmeti = new Kolekcija<Predmet*, DatumVrijeme>();
			_predmeti->AddElement(new Predmet(p), d);
			return true;
		}
		else
		{
			for (int i = 0; i < _predmeti->getTrenutno(); i++)
			{
				if (*_predmeti->getElement1(i) == p)
					return false;
			}
			_predmeti->AddElement(new Predmet(p), d);
			return true;
		}
	}
	eRazred GetRazred() { return _razred; }
	Kolekcija<Predmet*, DatumVrijeme> * GetPredmeti() { return _predmeti; }
	float GetProsjek() {
		float suma = 0;
		for (int i = 0; i < _predmeti->getTrenutno(); i++)
		{
			suma += _predmeti->getElement1(i)->GetOcjena();
		}
		suma /= _predmeti->getTrenutno();
		return suma;
	}
	friend ostream& operator<< (ostream &COUT, const Uspjeh &obj) {
		COUT << "-" << eRazredd[obj._razred - 1] << endl; 
		for (int i = 0; i < obj._predmeti->getTrenutno(); i++)
		{
			cout << *obj._predmeti->getElement1(i) << "   " << obj._predmeti->getElement2(i) << endl;
		}
		return COUT;
	}
};

class Kandidat {
	char * _imePrezime;
	string _emailAdresa;
	string _brojTelefona;
	vector<Uspjeh *> _uspjeh;
public:
	Kandidat(const char * imePrezime, string emailAdresa, string brojTelefona) :_emailAdresa(emailAdresa), _brojTelefona(brojTelefona) {
		_imePrezime = AlocirajNizKaraktera(imePrezime);
	}
	~Kandidat() {
		delete[] _imePrezime; _imePrezime = nullptr;
		for (size_t i = 0; i < _uspjeh.size(); i++) {
			delete _uspjeh[i];
			_uspjeh[i] = nullptr;
		}
	}
	bool AddPredmet(eRazred r, Predmet &p, DatumVrijeme &d)
	{
		for (int i = 0; i < _uspjeh.size(); i++)
		{
			if (_uspjeh[i]->GetRazred() == r)
			{
				if (_uspjeh[i]->GetPredmeti()->getTrenutno() == 6)
					return false;
			}
		}
		for (int i = 0; i < _uspjeh.size(); i++)
		{
			if (_uspjeh[i]->GetRazred() == r)
			{
				if (_uspjeh[i]->AddPredmet(p, d) == true)
					return true;
				else
					return false;
			}
		}
		Uspjeh *u = new Uspjeh(r);
		if (u->AddPredmet(p, d) == true)
		{
			_uspjeh.push_back(u);
			return true;
		}
		return false;
	}
	friend ostream& operator<< (ostream &COUT, const Kandidat &obj) {
		COUT << obj._imePrezime << " " << obj._emailAdresa << " " << obj._brojTelefona << endl;
		for (size_t i = 0; i < obj._uspjeh.size(); i++)
			COUT << *obj._uspjeh[i] << endl;
		return COUT;
	}
	vector<Uspjeh *> GetUspjeh() { return _uspjeh; }
	void SaljiEmail(eRazred r)
	{
		for (int i = 0; i < _uspjeh.size(); i++)
		{
			if (_uspjeh[i]->GetRazred() == r)
			{
				if (_uspjeh[i]->GetPredmeti()->getTrenutno() ==3)
				{
					cout << "evidentirali ste uspjeh za " << eRazredd[r-1] << " razred." << endl;
					thread SaljiSms(&Kandidat::SaljiSms,this,3.1, r);
					SaljiSms.join();
					return;
				}
			}
		}
	}
	void SaljiSms(float prosjek,eRazred r)
	{
		for (int i = 0; i < _uspjeh.size(); i++)
		{
			if (_uspjeh[i]->GetRazred() == r)
			{
				if (_uspjeh[i]->GetProsjek() > prosjek)
				{
					cout << "svaka cast za uspjeh " << _uspjeh[i]->GetProsjek() << endl;
					return;
				}
			}
		}
	}
	Uspjeh* operator()(eRazred r)
	{
		Uspjeh *u = nullptr;
		for (int i = 0; i < _uspjeh.size(); i++)
		{
			if (_uspjeh[i]->GetRazred() == r)
				u = _uspjeh[i];
		}
		return u;
	}
};

void main() {
	/****************************************************************************
	1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
	2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR CE BITI OZNACENO KAO "RE"
	3. SPAŠAVAJTE PROJEKAT KAKO BI SE SPRIJECILO GUBLJENJE URAÐENOG ZADATKA
	4. PROGRAMSKI CODE SE TAKOÐER NALAZI U FAJLU CODE.TXT
	5. NAZIVI FUNKCIJA, TE BROJ I TIP PARAMETARA MORAJU BITI IDENTICNI ONIMA KOJI SU KORIŠTENI U TESTNOM CODE-U, OSIM U SLUCAJU DA POSTOJI ADEKVATAN RAZLOG ZA NJIHOVU MODIFIKACIJU. OSTALE, POMOCNE FUNKCIJE MOŽETE IMENOVATI I DODAVATI PO ŽELJI.
	6. IZUZETAK BACITE U FUNKCIJAMA U KOJIMA JE TO NAZNACENO.
	****************************************************************************/

	DatumVrijeme temp,
		datum19062018_1015(19, 6, 2018, 10, 15),
		datum20062018_1115(20, 6, 2018, 11, 15),
		datum30062018_1215(30, 6, 2018, 12, 15),
		datum05072018_1231(5, 7, 2018, 12, 31),
		datum20062018_1115_Copy(datum20062018_1115);
	//funkcija ToCharArray vraca datum i vrijeme kao char *
	cout << datum19062018_1015.ToCharArray() << endl;//treba ispisati: 19.6.2018 10:15
	temp = datum05072018_1231;
	cout << temp.ToCharArray() << endl;//treba ispisati: 5.7.2018 12:31
	cout << datum20062018_1115_Copy.ToCharArray() << endl;//treba ispisati: 20.6.2018 11:15

	const int kolekcijaTestSize = 10;
	Kolekcija<int, int> kolekcija1;
	for (size_t i = 0; i < kolekcijaTestSize; i++)
		kolekcija1.AddElement(i + 1, i * i);
	cout << kolekcija1 << endl;

	Kolekcija<int, int> kolekcija2 = kolekcija1;
	cout << kolekcija2 << crt;
	Kolekcija<int, int> kolekcija3;
	kolekcija3 = kolekcija1;
	kolekcija3.SortOpadajuciByT2(); //od najvece prema najmanjoj vrijednosti
	cout << kolekcija3 << crt;

	//napomena se moze dodati i prilikom kreiranja objekta
	Predmet Matematika("Matematika", 5, "Ucesce na takmicenju"),
		Fizika("Fizika", 5),
		Hemija("Hemija", 2),
		Engleski("Engleski", 5);
	Fizika.DodajNapomenu("Pohvala za ostvareni uspjeh"); // dodaje novu napomenu zadrzavajuci ranije dodane
	cout << Matematika << endl;

	Kandidat jasmin("Jasmin Azemovic", "jasmin@gmail.com", "033 281 172");
	Kandidat adel("Adel Handzic", "adel@edu.fit.ba", "033 281 170");

	/*
	uspjeh (tokom srednjoskolskog obrazovanja) se dodaje za svaki predmet na nivou razreda.
	tom prilikom onemoguciti:
	- dodavanje vise od 6 predmeta za jedan razred
	- dodavanje istoimenih predmeta na nivou jednog razreda,
	- dodavanje vise predmeta u kratkom vremenskom periodu (na nivou jednog razreda, razmak izmedju dodavanja pojedinih predmeta mora biti najmanje minut).
	razredi (predmeti ili uspjeh) ne moraju biti dodavani sortiranim redoslijedom (npr. prvo se moze dodati uspjeh za II
	razred, pa onda za I razred i sl.). Funkcija vraca true ili false u zavisnosti od (ne)uspjesnost izvrsenja
	*/
	if (jasmin.AddPredmet(DRUGI, Fizika, datum20062018_1115))
		cout << "Predmet uspjesno dodan!" << crt;
	if (jasmin.AddPredmet(DRUGI, Hemija, datum30062018_1215))
		cout << "Predmet uspjesno dodan!" << crt;
	if (jasmin.AddPredmet(PRVI, Engleski, datum19062018_1015))
		cout << "Predmet uspjesno dodan!" << crt;
	if (jasmin.AddPredmet(PRVI, Matematika, datum20062018_1115))
		cout << "Predmet uspjesno dodan!" << crt;
	//ne treba dodati Matematiku jer je vec dodana u prvom razredu
	if (jasmin.AddPredmet(PRVI, Matematika, datum05072018_1231))
		cout << "Predmet uspjesno dodan!" << crt;
	//ne treba dodati Fiziku jer nije prosao minut od dodavanja posljednjeg predmeta
	if (jasmin.AddPredmet(PRVI, Fizika, datum05072018_1231))
		cout << "Predmet uspjesno dodan!" << crt;
	/*pretpostavka je da na nivou jednog razreda kandidati imaju 6 predmeta.
	upravo zbog toga, nakon evidentiranja 6 predmeta na nivou jednog razreda kandidatu se salje mail
	sa porukom: "evidentirali ste uspjeh za X razred". ukoliko je prosjek na nivou tog razreda veci od minimalan_prosjek
	kandidatu se salje SMS sa porukom: "svaka cast za uspjeh 4.X". slanje poruka i emailova implemenitrati koristeci
	zasebne thread-ove.
	*/
	thread SaljiEmail(&Kandidat::SaljiEmail,ref(jasmin),PRVI);
	SaljiEmail.join();
	
	Uspjeh * u = jasmin(PRVI);//vraca uspjeh kandidata ostvaren u prvom razredu
	if (u != nullptr)
		cout << *u << endl;


	system("pause>0");
}