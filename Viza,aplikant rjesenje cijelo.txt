#include <iostream>
#include <string>
#include <vector>
#include <regex>
#include <exception>
using namespace std;
char *Alociraj(const char*nesto)
{
	if (nesto == nullptr)
		return nullptr;
	int size = strlen(nesto) + 1;
	char *temp = new char[size];
	strcpy_s(temp, size, nesto);
	return temp;
}
const char *crt = "\n-----------------------------------------------\n";

enum Status { ZAHTJEV_ZAPRIMLJEN, ODUSTAO, ODBIJENA, IZDATA, ISTEKLA, PONISTENA };
const char* status[]{ "ZAHTJEV_ZAPRIMLJEN", "ODUSTAO", "ODBIJENA", "IZDATA", "ISTEKLA", "PONISTENA" };
enum Sortiranje { RASTUCI, OPADAJUCI };
enum Drzava { SAD, AUSTRALIJA, ENGLESKA };
const char* drzava[]{ "SAD", "AUSTRALIJA", "ENGLESKA" };

class Datum {
	int *_dan, *_mjesec, *_godina;
public:
	Datum(int dan = 1, int mjesec = 1, int godina = 2000) {
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);
	}
	Datum(const Datum&d)
	{
		_dan = new int(*d._dan);
		_mjesec = new int(*d._mjesec);
		_godina = new int(*d._godina);
	}
	void operator=(const Datum&d)
	{
		if (_dan != nullptr)
		{
			delete _dan;
			delete _mjesec;
			delete _godina;
			_dan = _mjesec = _godina = nullptr;
		}
		_dan = new int(*d._dan);
		_mjesec = new int(*d._mjesec);
		_godina = new int(*d._godina);

	}
	Datum &operator++()
	{
		(*_dan)++;
		if (*_dan > 31)
			*_dan = 0;
		return *this;
	}
	~Datum() {
		delete _dan; _dan = nullptr;
		delete _mjesec; _mjesec = nullptr;
		delete _godina; _godina = nullptr;
	}
	bool operator==(const Datum&d)
	{
		return *_dan == *d._dan&&*_mjesec == *d._mjesec&&*_godina == *d._godina;
	}
	bool Jel10(const Datum&d)
	{
		if ((*_godina) + 10 <= *d._godina)
			return true;
	}
	bool operator>=(const Datum&d)
	{
		if (*_godina > *d._godina)
			return true;
		if (*_godina == *d._godina)
		{
			if (*_mjesec > *d._mjesec)
				return true;
			if (*_mjesec == *d._mjesec)
			{
				if (*_dan >= *d._dan)
					return true;
				else
					return false;
			}
		}
	}
	bool operator<=(const Datum&d)
	{
		if (*_godina < *d._godina)
			return true;
		if (*_godina == *d._godina)
		{
			if (*_mjesec < *d._mjesec)
				return true;
			if (*_mjesec == *d._mjesec)
			{
				if (*_dan <= *d._dan)
					return true;
				else
					return false;
			}
		}
	}
	friend ostream& operator<< (ostream &COUT, const Datum &obj) {
		COUT << *obj._dan << "." << *obj._mjesec << "." << *obj._godina;
		return COUT;
	}
};

template<class T1, class T2, int max>
class FITKolekcija {
	T1 * _elementi1[max];
	T2 * _elementi2[max];
	int _trenutno;
public:
	FITKolekcija() {
		for (size_t i = 0; i < max; i++) {
			_elementi1[i] = nullptr;
			_elementi2[i] = nullptr;
		}
		_trenutno = 0;
	}
	FITKolekcija(const FITKolekcija&fit)
	{
		_trenutno = fit._trenutno;
		for (int i = 0; i < _trenutno; i++)
		{
			_elementi1[i] = new T1(*fit._elementi1[i]);
			_elementi2[i] = new T2(*fit._elementi2[i]);
		}
	}
	void operator=(const FITKolekcija&fit)
	{
		for (int i = 0; i < _trenutno; i++)
		{
			if (_elementi1[i] != nullptr&&_elementi2[i] != nullptr)
			{
				delete[]_elementi1[i];
				_elementi1[i] = nullptr;
				delete[]_elementi2[i];
				_elementi2[i] = nullptr;
			}
		}
		_trenutno = fit._trenutno;
		for (int i = 0; i < _trenutno; i++)
		{
			_elementi1[i] = new T1(*fit._elementi1[i]);
			_elementi2[i] = new T2(*fit._elementi2[i]);
		}
	}
	~FITKolekcija() {
		for (size_t i = 0; i < max; i++) {
			delete _elementi1[i]; _elementi1[i] = nullptr;
			delete _elementi2[i]; _elementi2[i] = nullptr;
		}
	}
	void Dodaj(T1 &t, T2 &t1) {
		if (_trenutno == max)
			throw exception("Kolekcija je dosegla svoju maksimalnu velicinu.");
		_elementi1[_trenutno] = new T1(t);
		_elementi2[_trenutno] = new T2(t1);
		_trenutno++;
	}
	T1 * GetT1()const { return *_elementi1; }
	T1 & GetT11(int lok)const { return *_elementi1[lok]; }
	T2 * GetT2()const { return *_elementi2; }
	T2 & GetT22(int lok)const { return *_elementi2[lok]; }
	int GetTrenutno() const { return _trenutno; }
	void Sortiraj(Sortiranje s)
	{
		bool sortirano = true;
		do
		{
			sortirano = false;
			for (int i = 0; i < _trenutno - 1; i++)
			{
				if (s == OPADAJUCI)
				{
					if (*_elementi1[i + 1] > *_elementi1[i])
					{
						T1 *t = _elementi1[i];
						_elementi1[i] = _elementi1[i + 1];
						_elementi1[i + 1] = t;
						T2 *t1 = _elementi2[i];
						_elementi2[i] = _elementi2[i + 1];
						_elementi2[i + 1] = t1;
						sortirano = true;
					}
				}
				else
				{
					if (*_elementi1[i + 1] < *_elementi1[i])
					{
						T1 *t = _elementi1[i];
						_elementi1[i] = _elementi1[i + 1];
						_elementi1[i + 1] = t;
						T2 *t1 = _elementi2[i];
						_elementi2[i] = _elementi2[i + 1];
						_elementi2[i + 1] = t1;
						sortirano = true;
					}
				}
			}
		} while (sortirano);
	}
	friend ostream& operator<< (ostream &COUT, const FITKolekcija &obj) {
		for (size_t i = 0; i < obj._trenutno; i++)
			COUT << *obj._elementi1[i] << " " << *obj._elementi2[i] << endl;
		return COUT;
	}
};


class Viza {
protected:
	Drzava _drzava;
	Datum _vazenjeOD;
	Datum _vazenjeDO;
	char * _napomena;
	// string se odnosi na razlog promjene statusa, a moguce je samo 10 izmjena statusa
	FITKolekcija<Status, string, 10> _statusi;
public:
	Viza(Drzava drzava, Datum _OD, Datum _DO, const char * napomena = nullptr) :_vazenjeDO(_DO), _vazenjeOD(_OD)
	{
		if (napomena != nullptr) {
			_napomena = new char[strlen(napomena) + 1];
			strcpy_s(_napomena, strlen(napomena) + 1, napomena);
		}
		else
			_napomena = nullptr;
		_drzava = drzava;
	}
	Viza(const Viza &v)
	{
		_drzava = v._drzava;
		_vazenjeOD = v._vazenjeOD;
		_vazenjeDO = v._vazenjeDO;
		_napomena = Alociraj(v._napomena);
		_statusi = v._statusi;
	}
	void operator=(const Viza &v)
	{
		if (_napomena != nullptr)
			delete[]_napomena;
		_drzava = v._drzava;
		_vazenjeOD = v._vazenjeOD;
		_vazenjeDO = v._vazenjeDO;
		_napomena = Alociraj(v._napomena);
		_statusi = v._statusi;
	}
	~Viza() { delete[] _napomena; _napomena = nullptr; }
	Drzava GetDrzava()const { return _drzava; }
	Datum GetVazenjeOD() { return _vazenjeOD; }
	Datum GetVazenjeDO() { return _vazenjeDO; }
	char * GetNapomena() { return _napomena; }
	void DodajStatus(Status s, string napomena = "")
	{
		_statusi.Dodaj(s, napomena);
	}
	FITKolekcija<Status, string, 10> & GetStatuse() { return _statusi; }
	bool operator==(const Viza&v)
	{
		return _drzava == v._drzava&&_vazenjeDO == v._vazenjeDO&&_vazenjeOD == v._vazenjeOD;
	}
	virtual void Info()const = 0;
};

class PoslovnaViza :public Viza {
	string _kompanija; //naziv kompanije koja potvrduje da posluje sa aplikantom
public:
	PoslovnaViza(Drzava drzava, Datum _OD, Datum _DO, string kompanija, const char * napomena = nullptr) : Viza(drzava, _OD, _DO, napomena) {
		_napomena = Alociraj(napomena);
		_kompanija = kompanija;
	}
	PoslovnaViza(const PoslovnaViza&v) :Viza(v)
	{
		_kompanija = v._kompanija;
	}
	void operator=(const PoslovnaViza&v)
	{
		_kompanija = v._kompanija;
		if (_napomena != nullptr)
			delete[]_napomena;
		_drzava = v._drzava;
		_vazenjeOD = v._vazenjeOD;
		_vazenjeDO = v._vazenjeDO;
		_napomena = Alociraj(v._napomena);
		_statusi = v._statusi;
	}
	void Info()const {
		cout << drzava[_drzava] << " " << _vazenjeOD << " " << _vazenjeDO << " " << _kompanija << endl;
		cout << ((_napomena != nullptr) ? _napomena : "") << endl;
		cout << "STATUSI -> ";
		for (int i = 0; i < _statusi.GetTrenutno(); i++)
		{
			cout << status[i] << " " << _statusi.GetT2()[i] << endl;
		}
	}
	friend ostream & operator << (ostream & COUT, const PoslovnaViza & obj) {
		obj.Info();
		return cout;
	}

};
class TuristickaViza : public Viza {
	string _adresa; //adresa hotele ili drugog smještaja na kojoj ce aplikant boraviti
public:
	TuristickaViza(Drzava drzava, Datum _OD, Datum _DO, string adresa, const char * napomena = nullptr) : Viza(drzava, _OD, _DO, napomena) {
		_napomena = Alociraj(napomena);
		_adresa = adresa;
	}
	TuristickaViza(const TuristickaViza&v) :Viza(v)
	{
		_adresa = v._adresa;
	}
	void Info()const {
		cout << drzava[_drzava] << " " << _vazenjeOD << " " << _vazenjeDO << " " << _adresa << endl;
		cout << ((_napomena != nullptr) ? _napomena : "") << endl;
		cout << "STATUSI -> ";
		for (int i = 0; i < _statusi.GetTrenutno(); i++)
		{
			cout << status[i] << " " << _statusi.GetT22(i) << endl;
		}
	}
	friend ostream & operator << (ostream & COUT, TuristickaViza & obj) {
		obj.Info();
		return COUT;
	}
};

class Aplikant {
	char * _imePrezime;
	Datum * _datumRodjenja;
	char * _brojPasosa;
	vector<Viza *> _vize;
public:
	Aplikant(const char * imePrezime, Datum datumRodjenja, const char * brPasosa) {
		int vel = strlen(imePrezime) + 1;
		_imePrezime = new char[vel];
		strcpy_s(_imePrezime, vel, imePrezime);
		vel = strlen(brPasosa) + 1;
		_brojPasosa = new char[vel];
		strcpy_s(_brojPasosa, vel, brPasosa);
		_datumRodjenja = new Datum(datumRodjenja);
	}
	~Aplikant() {
		delete[]_imePrezime; _imePrezime = nullptr;
		delete[]_brojPasosa; _brojPasosa = nullptr;
		delete _datumRodjenja; _datumRodjenja = nullptr;
		for (size_t i = 0; i < _vize.size(); i++)
		{
			delete _vize[i]; _vize[i] = nullptr;
		}
	}
	friend ostream & operator << (ostream & COUT, const Aplikant & obj) {
		COUT << obj._imePrezime << " " << *obj._datumRodjenja << " " << obj._brojPasosa << endl;
		COUT << "VIZE -> " << endl;
		for (size_t i = 0; i < obj._vize.size(); i++)
			obj._vize[i]->Info();
		return COUT;
	}
	bool DodajVizu(Viza *p)
	{
		PoslovnaViza *pos = dynamic_cast<PoslovnaViza*>(p);
		if (pos != nullptr)
		{
			if (_datumRodjenja->Jel10(pos->GetVazenjeOD()) == false)
				return false;
			for (int i = 0; i < _vize.size(); i++)
			{
				if (_vize[i]->GetDrzava() == p->GetDrzava())
				{
					if (_vize[i]->GetVazenjeOD() <= p->GetVazenjeOD() && _vize[i]->GetVazenjeDO() >= p->GetVazenjeDO())
						return false;
				}
			}
			if (p->GetDrzava() == SAD)
			{
				for (int i = 0; i < _vize.size(); i++)
				{
					if (strcmp(_vize[i]->GetNapomena(), "Ponistena.") == 0)
						return false;
				}
			}
			_vize.push_back(new PoslovnaViza(*pos));
		}

	}
	bool DodajStatus(Viza *v, Status s, string napomena = "")
	{
		if (v->GetStatuse().GetTrenutno() == 10)
		{
			cout << "Ne mozete dodati vise statusa." << endl;
			return false;
		}
		for (int i = 0; i < _vize.size(); i++)
		{
			if (*_vize[i] == *v)
			{
				if (s == ODBIJENA)
				{
					if (strcmp(status[v->GetStatuse().GetTrenutno() - 1], status[ZAHTJEV_ZAPRIMLJEN]) != 0)
						return false;
				}
				if (s == PONISTENA)
				{
					cout << status[_vize[i]->GetStatuse().GetTrenutno()] << endl;
					if (strcmp(status[_vize[i]->GetStatuse().GetTrenutno() - 1], status[ZAHTJEV_ZAPRIMLJEN]) == 0)
					{
						_vize[i]->DodajStatus(s, napomena);
						return true;
					}
					if (strcmp(status[_vize[i]->GetStatuse().GetTrenutno() - 1], status[IZDATA]) != 0)
						return false;
				}
				_vize[i]->DodajStatus(s, napomena);
				return true;
			}
		}
		PoslovnaViza *pv = dynamic_cast<PoslovnaViza*>(v);
		TuristickaViza *tv = dynamic_cast<TuristickaViza*>(v);
		if (pv != nullptr)
			pv->DodajStatus(s, napomena);
		else
			tv->DodajStatus(s, napomena);
	}
	vector<Viza * > GetVize() { return _vize; }
	void PrintajVizu(Viza *v)const {
		TuristickaViza *tv = dynamic_cast<TuristickaViza*>(v);
		PoslovnaViza *pv = dynamic_cast<PoslovnaViza*>(v);
		if (tv != nullptr)
		{
			cout << *tv << endl;
		}
		else
			cout << *pv << endl;
	}
	vector<Viza *> GetVizeByDrzava(Drzava d, Status s)
	{
		vector<Viza *> obj;
		for (int i = 0; i < _vize.size(); i++)
		{
			if (_vize[i]->GetDrzava() == d)
			{
				for (int j = 0; j < _vize[i]->GetStatuse().GetTrenutno(); j++)
				{
					if (_vize[i]->GetStatuse().GetT11(j) == s)
					{
						TuristickaViza *tv = dynamic_cast<TuristickaViza*>(_vize[i]);
						PoslovnaViza *pv = dynamic_cast<PoslovnaViza*>(_vize[i]);
						if (tv != nullptr)
							obj.push_back(new TuristickaViza(*tv));
						else
							obj.push_back(new PoslovnaViza(*pv));
					}
				}
			}
		}
		return obj;
	}
	void ZamijeniRijec(string prvi, string drugi)
	{
		string pravilo = "\\b"+prvi+"\\b";
		regex obj(pravilo);
		string tekst;
		for (int i = 0; i < _vize.size(); i++)
		{
			for (int j = 0; j < _vize[i]->GetStatuse().GetTrenutno(); j++)
			{
				tekst = regex_replace(_vize[i]->GetStatuse().GetT22(j), obj, drugi);
			}
		}
		cout << tekst << endl;
	}
};

void main() {

	/****************************************************************************
	1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
	2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR CE BITI OZNACENO KAO "RE"
	3. SPAŠAVAJTE PROJEKAT KAKO BI SE SPRIJECILO GUBLJENJE URAÐENOG ZADATKA
	4. PROGRAMSKI CODE SE TAKOÐER NALAZI U FAJLU CODE.TXT
	5. NAZIVI FUNKCIJA, TE BROJ I TIP PARAMETARA MORAJU BITI IDENTICNI ONIMA KOJI SU KORIŠTENI U TESTNOM CODE-U, OSIM U SLUCAJU DA POSTOJI ADEKVATAN RAZLOG ZA NJIHOVU MODIFIKACIJU. OSTALE, POMOCNE FUNKCIJE MOŽETE IMENOVATI I DODAVATI PO ŽELJI.
	6. IZUZETAK BACITE U FUNKCIJAMA U KOJIMA JE TO NAZNACENO.
	****************************************************************************/



	Datum danas(15, 2, 2017);
	Datum sutra(++danas); // inkrementiranjem se uvecava dan za 1
	Datum prekosutra;
	Datum dat15022017(15, 2, 2017), dat18082017(18, 8, 2017), dat11052018(11, 5, 2018), dat11122017(11, 12, 2017);


	prekosutra = danas;
	if (prekosutra == danas)
		cout << "Datumi su jednaki" << endl;
	cout << danas << endl << sutra << endl << prekosutra << crt;

	int v6 = 6, v13 = 13, v32 = 32, v63 = 63, v98 = 98, v109 = 109, v196 = 196;

	FITKolekcija<int, int, 7> brojevi;
	brojevi.Dodaj(v196, v6);
	brojevi.Dodaj(v13, v32);
	brojevi.Dodaj(v98, v196);
	brojevi.Dodaj(v63, v13);
	brojevi.Dodaj(v98, v196);
	brojevi.Dodaj(v196, v6);

	cout << brojevi << crt;
	//NA KOJI NACIN CE SE VRŠITI SORTIRANJE PRVENSTVENO ZAVISI OD VRIJEDNOSTI PARAMETRA, A VRŠI SE NA OSNOVU VRIJEDNOSTI TIPA T1
	brojevi.Sortiraj(RASTUCI);
	cout << brojevi << crt;
	brojevi.Sortiraj(OPADAJUCI);
	cout << brojevi << crt;

	try
	{
		//U SLUCAJU PREKORACENJA DEFINISANE VELICINE KOLEKCIJE, POTREBNO JE BACITI IZUZETAK
		brojevi.Dodaj(v13, v196);
	}
	catch (exception & err)
	{
		cout << "Error -> " << err.what() << endl;
	}

	Aplikant jasmin("Jasmin Azemovic", Datum(15, 5, 1979), "BS6985645");
	PoslovnaViza poslovna(SAD, dat15022017, dat18082017, "Microsoft");

	/*
	NOVA VIZA SE NE MOŽE DODATI UKOLIKO:
	-	JE APLIKANT MLAÐI OD 10 GODINA
	-	U TOM PERIODU (ODNOSI SE NA PERIOD VIZE OD - DO) NE POSTOJI VAŽECA (POJAM VAŽECA PODRAZUMIJEVA DA JE POSLJEDNJI STATUS VIZE BIO IZDATA TJ. DA VIZA NIJE
	PONIŠTENA ILI ISTEKLA) VIZA ZA TU DRŽAVU, BEZ OBZIRA NA NJENU VRSTU.
	-	JE NEKA OD RANIJIH VIZA PONIŠTENA (OVO SE ODNOSI SAMO NA VIZE ZA DRŽAVU: SAD)
	*/
	if (jasmin.DodajVizu(&poslovna))
		cout << "Podaci o vizi uspješno zaprimljeni" << endl;

	//STATUSI SE MOGU DODAVATI SAMO U REDOSLIJEDU U KOJEM SE NALAZE U ENUMERACIJI NPR.
	//-	NIJE MOGUCE ODBITI VIZU AKO PRETHODNO NIJE IMALA STATUS DA JE ZAHTJEV_ZAPRIMLJEN;
	//-	NIJE MOGUCE PONIŠTITI VIZU KOJA PRETHODNO NIJE IZDATA

	if (jasmin.DodajStatus(&poslovna, ZAHTJEV_ZAPRIMLJEN, "provjeriti navode sa predstavnicima kompanije Microsoft"))
		cout << "Status vize uspijesno promijenjen" << endl;
	else
		cout << "Aplikant " << jasmin << " ne posjeduje evidentiranu trazenu vizu ili status vize nema odgovarajucu vrijednost" << endl;


	if (jasmin.DodajStatus(&poslovna, PONISTENA, "predstavnicima kompanije Microsoft nemaju informaciju o posjeti navedenog aplikanta"))
		cout << "Status vize uspijesno promijenjen" << endl;
	else
		cout << "Aplikant " << jasmin << " ne posjeduje evidentiranu trazenu vizu ili status vize nema odgovarajucu vrijednost" << endl;

	TuristickaViza turisticka(ENGLESKA, dat18082017, dat11122017, "Whitehall Pl, London SW1A 2BD, UK");

	if (jasmin.DodajStatus(&turisticka, ZAHTJEV_ZAPRIMLJEN))
		cout << "Status vize uspijesno promijenjen" << endl;
	else
		cout << "Aplikant " << jasmin << " ne posjeduje evidentiranu trazenu vizu ili status vize nema odgovarajucu vrijednost" << endl;
	cout << "---------------------------------------------" << endl;
	if (jasmin.DodajStatus(&turisticka, IZDATA)) {
		cout << "Status vize uspijesno promijenjen" << endl;
		//U ZASEBNOJ NITI URADITI PRINTANJE VIZE...KORISTITI METODU SLEEP_FOR
		jasmin.PrintajVizu(&turisticka);
	}
	else
		cout << "Aplikant " << jasmin << " ne posjeduje evidentiranu trazenu vizu ili status vize nema odgovarajucu vrijednost" << endl;
	//VRACA PODATKE O SVIM VIZAMA KOJE SU IZDATE ZA ODREÐENU DRŽAVU, A KOJE SU IMALE ODREÐENI STATUS
	vector<Viza *> jasminVize = jasmin.GetVizeByDrzava(SAD, PONISTENA);
	//UNUTAR NAPOMENE MIJENJA SADRŽAJ "nemaju informaciju" SA "su upoznti sa" - KORISTITI REGEX
	jasmin.ZamijeniRijec("nemaju informaciju", "su upoznti sa");
	system("pause");
}