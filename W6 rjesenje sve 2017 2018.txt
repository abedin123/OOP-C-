#include<iostream>
using namespace std;

template<class T>
class Kolekcija {
	T* _elementi;
	int _trenutno;
public:
	Kolekcija()
	{
		_elementi = nullptr;
		_trenutno = 0;
	}
	Kolekcija(const Kolekcija<T>&k)
	{
		_elementi = new T[k._trenutno];
		for (int i = 0; i < k._trenutno; i++)
		{
			_elementi[i] = k._elementi[i];
		}
		_trenutno = k._trenutno;
	}
	void operator=(const Kolekcija<T> &k)
	{
		_elementi = new T[k._trenutno];
		for (int i = 0; i < k._trenutno; i++)
		{
			_elementi[i] = k._elementi[i];
		}
		_trenutno = k._trenutno;
	}
	void DodajElement(T &t)
	{
		T *temp = new T[_trenutno + 1];
		for (int i = 0; i < _trenutno; i++)
		{
			temp[i] = _elementi[i];
		}
		delete[]_elementi;
		_elementi = temp;
		_elementi[_trenutno] = t;
		_trenutno++;
	}
	void UkloniElement(T &t)
	{
		int j = 0;
		T *temp = new T[_trenutno - 1];
		for (int i = 0; i < _trenutno; i++)
		{
			if (_elementi[i] != t)
				temp[j] = _elementi[i];
		}
		delete[]_elementi;
		_elementi = temp;
		_trenutno--;
	}
	int GetTrenutno() { return _trenutno; }
	T *Getniz() const { return _elementi; }
	T &GetElement(int lok)const {
		return _elementi[lok];
	}
	friend ostream&operator<<<>(ostream&cout, Kolekcija<T> &k);
};
template<class T>
ostream&operator<<<>(ostream&cout, Kolekcija<T> &k)
{
	for (int i = 0; i < k._trenutno; i++)
	{
		cout << k._elementi[i] << endl;
	}
	return cout;
}
class Clan
{
	static int clanskibroj;
	const int _clanskiBroj; //automatski generisati i sprijeciti dupliranje
	char*_imePrezime;
	char _telefon[20];
	int _brojIznajmljenihKnjiga;
public:
	Clan() :_clanskiBroj(clanskibroj) {
		_imePrezime = new char[4];
		strcpy_s(_imePrezime, 4, "---");
		strcpy_s(_telefon, 4, "---");
	}
	Clan(const char* imePrezime, const char* telefon) :_clanskiBroj(clanskibroj++)
	{
		int vel = strlen(imePrezime) + 1;
		_imePrezime = new char[vel];
		strcpy_s(_imePrezime, vel, imePrezime);
		strncpy_s(_telefon, telefon, _TRUNCATE);
		_brojIznajmljenihKnjiga = 0;

	}
	Clan(const Clan&c) :_clanskiBroj(clanskibroj)
	{
		int size = strlen(c._imePrezime) + 1;
		_imePrezime = new char[size];
		strcpy_s(_imePrezime, size, c._imePrezime);
		strcpy_s(_telefon, strlen(c._telefon) + 1, c._telefon);
		_brojIznajmljenihKnjiga = c._brojIznajmljenihKnjiga;
	}
	~Clan()
	{
		if (_imePrezime != nullptr)
		{
			delete[] _imePrezime;
			_imePrezime = nullptr;
		}
	}
	void operator=(const Clan&c)
	{
		int size = strlen(c._imePrezime) + 1;
		_imePrezime = new char[size];
		strcpy_s(_imePrezime, size, c._imePrezime);
		strcpy_s(_telefon, 12, c._telefon);
		_brojIznajmljenihKnjiga = c._brojIznajmljenihKnjiga;
	}
	void SetBrojIzn() { _brojIznajmljenihKnjiga++; }
	friend ostream& operator<<(ostream&, const Clan&);
	int GetClanski()const { return _clanskiBroj; }
};
int Clan::clanskibroj = 1;
ostream& operator<<(ostream& cout, const Clan& c)
{
	cout << "\nPodaci o clanu\n";
	cout << "Clanski broj: " << c._clanskiBroj << endl;
	cout << "Ime i prezime: " << c._imePrezime << endl;
	cout << "Telefon: " << c._telefon << endl;
	cout << "Broj iznajmljenih knjiga:" << c._brojIznajmljenihKnjiga << endl;
	return cout;
}

class Knjiga
{
	char _ISBN[20];
	char* _naslov;
	int _godinaIzdanja;
	Clan* _clan; //Podaci o clanu kod kojeg se knjiga trenutno nalazi. Pohraniti samo adresu postojeceg clana.
	int _brojDanaZauzetosti;

	static bool ProvjeriISBN(const char* ISBN)
	{
		bool promjena = false;
		if (strlen(ISBN) != 17)
			return false;
		for (int i = 0; i < strlen(ISBN); i++)
		{
			promjena = false;
			if (ISBN[i] >= '0'&&ISBN[i] <= '9'&&ISBN[i + 1] >= '0'&&ISBN[i + 1] <= '9'&&ISBN[i + 2] >= '0'&&ISBN[i + 2] <= '9'&&ISBN[i + 3] >= '-')
			{
				if (i == 0)
				{
					i = 3;
					promjena = true;
				}
				if (i == 4 && promjena == false)
				{
					i = 7;
					promjena = true;
				}
				if (i == 8 && promjena == false)
				{
					i = 11;
					promjena = true;
				}
				if (i == 12 && promjena == false)
				{
					i = 16;
					promjena = true;
				}
			}
			else
				return false;
			if (i == 16)
			{
				if (ISBN[i] >= '0'&&ISBN[i] <= '9')
					return true;
			}
		}
		//Podržani su 13-znamenkasti ISBN brojevi zapisani u formatu: 978-953-220-545-9
		//Pravilo: Broj treba da sadrži 4 znaka '-', bez slovnih oznaka (mala i velika slova)

		//Dodatno naknadno provjeriti da izmedu pojedinih znakova '-' budu zapisana 3 broja, a 
		//iza posljednjeg samo jedan
	}

public:
	Knjiga()
	{
		_naslov = new char[4];
		strcpy_s(_naslov, 4, "---");
		strcpy_s(_ISBN, 18, "978-953-220-545-9");
		_godinaIzdanja = 2000;
		_clan = nullptr;
		_brojDanaZauzetosti = 0;
	}
	Knjiga(const char*naslov, const char*ISBN, int godizd, int brdana)
	{
		if (ProvjeriISBN(ISBN) == true)
			strcpy_s(_ISBN, 18, ISBN);
		else
			cout << "Greska" << endl;
		int size = strlen(naslov) + 1;
		_naslov = new char[size];
		strcpy_s(_naslov, size, naslov);
		_godinaIzdanja = godizd;
		_brojDanaZauzetosti = brdana;
	}
	Knjiga(const Knjiga &k)
	{
		strcpy_s(_ISBN, 18, k._ISBN);
		int size = strlen(k._naslov) + 1;
		_naslov = new char[size];
		strcpy_s(_naslov, size, k._naslov);
		_godinaIzdanja = k._godinaIzdanja;
		_brojDanaZauzetosti = k._brojDanaZauzetosti;
		if (k._clan != nullptr)
			_clan = new Clan(*k._clan);
	}
	~Knjiga()
	{
		delete[]_naslov; _naslov = nullptr;
	}
	void ZaduziKnjigu(Clan &c)
	{
		_clan = new Clan(c);
		c.SetBrojIzn();
	}
	void operator=(const Knjiga &k)
	{
		strcpy_s(_ISBN, 18, k._ISBN);
		if (_naslov != nullptr)
		{
			delete[]_naslov; _naslov = nullptr;
		}
		int size = strlen(k._naslov) + 1;
		_naslov = new char[size];
		strcpy_s(_naslov, size, k._naslov);
		_godinaIzdanja = k._godinaIzdanja;
		_brojDanaZauzetosti = k._brojDanaZauzetosti;
		if (k._clan != nullptr)
			_clan = new Clan(*k._clan);
	}
	friend ostream& operator<<(ostream&cout, const Knjiga &k);
	void RazduziKnjigu(Clan &c)
	{
		delete _clan; _clan = nullptr;
		cout << "Razduzili ste knjigu." << endl;
	}
	bool operator!=(const Knjiga &k)
	{
		if (strcmp(_naslov, k._naslov) == 0 && strcmp(_ISBN, k._ISBN) == 0 && _godinaIzdanja == k._godinaIzdanja)
			return false;
		return true;
	}
	const char *GetISBN()const { return _ISBN; }
	int GetZauzetos()const { return _brojDanaZauzetosti; }
	bool ProvjeriZaduzenost(const Knjiga &k)const
	{
		if (k._clan == nullptr)
			return false;
		else
			return true;
	}
	void SetZauzetost(int broj) { _brojDanaZauzetosti += broj; }
};
ostream& operator<<(ostream&cout, const Knjiga &k) {
	cout <<"ISBN:"<< k._ISBN << endl;
	cout <<"Naslov:"<< k._naslov << endl;
	cout <<"Broj dana zauzetosti:"<< k._brojDanaZauzetosti << endl;
	if (k._clan != nullptr)
		cout <<"Clan:"<< *k._clan << endl;
	cout <<"Godina izdanja:"<< k._godinaIzdanja << endl;
	return cout;
}
class Polica
{
	int& _brojPolice;
	int _kapacitet;
	Kolekcija<Knjiga> _knjige;
public:
	int br = _brojPolice;
	Polica(int kapacitet, int &brojpolice) :_brojPolice(brojpolice)
	{
		_kapacitet = kapacitet;
	}
	Polica(const Polica &p) :_brojPolice(br)
	{
		_kapacitet = p._kapacitet;
		_knjige = p._knjige;
	}
	~Polica()
	{

	}
	bool DodajKnjigu(Knjiga &k)
	{
		if (_knjige.GetTrenutno() >= _kapacitet)
		{
			cout << "Ova polica nema toliki kapacitet." << endl;
			return false;
		}
		_knjige.DodajElement(k);
		return true;
	}
	int GetBrPolice()const { return _brojPolice; }
	void UkloniKnjigu(Knjiga &k)
	{
		_knjige.UkloniElement(k);
	}
	Kolekcija<Knjiga> &GetKnjige()
	{
		return _knjige;
	}
	void Info(int brojdana)
	{
		cout << "Slobodne knjige:" << endl;
		for (int i = 0; i < _knjige.GetTrenutno(); i++)
		{
			if (_knjige.GetElement(i).ProvjeriZaduzenost(_knjige.GetElement(i)) == false)
			{
				cout << _knjige.GetElement(i) << endl;
			}
		}
		cout << "Zaduzene knjige:" << endl;
		for (int i = 0; i < _knjige.GetTrenutno(); i++)
		{
			if (_knjige.GetElement(i).ProvjeriZaduzenost(_knjige.GetElement(i)) == true)
			{
				cout << _knjige.GetElement(i) << endl;
			}
		}
		cout << "Knjige koje su na citanju vise od" << " " << brojdana << ":" << endl;
		for (int i = 0; i < _knjige.GetTrenutno(); i++)
		{
			if (_knjige.GetElement(i).GetZauzetos() < brojdana)
			{
				cout << _knjige.GetElement(i) << endl;
			}
		}
		cout << "Kapacitet police:" << _kapacitet << endl;
		cout << "Broj police:" << _brojPolice << endl;
		cout << _knjige << endl;
	}
	friend ostream& operator<<(ostream&cout, Polica &p);
};
ostream& operator<<(ostream&cout, Polica &p) {
	cout << "Broj police:" << p._brojPolice << endl;
	cout << "Kapacitet:" << p._kapacitet << endl;
	for (int i = 0; i < p._knjige.GetTrenutno(); i++)
	{
		cout << p._knjige << endl;
	}
	return cout;
}
class Bibilioteka
{
	char* _naziv;
	Kolekcija<Polica*> _police;
	Kolekcija<Clan*> _clanovi;
public:
	Bibilioteka()
	{
		_naziv = new char[4];
		strcpy_s(_naziv, 4, "---");
	}
	Bibilioteka(const char*naziv)
	{
		int size = strlen(naziv) + 1;
		_naziv = new char[size];
		strcpy_s(_naziv, size, naziv);
	}
	void operator+=(Clan &c)
	{
		Clan *tmp = &c;
		_clanovi.DodajElement(tmp);
	}
	void DodajPolicu(Polica &p)
	{
		Polica *tmp = &p;
		_police.DodajElement(tmp);
	}
	void operator()(Knjiga &k, int brpol)
	{
		for (int i = 0; i < _police.GetTrenutno(); i++)
		{
			if (_police.GetElement(i)->GetBrPolice() == brpol)
			{
				_police.GetElement(i)->GetKnjige().DodajElement(k);
			}
		}
	}
	void Ukloni(Knjiga &k, int brpol)
	{
		for (int i = 0; i < _police.GetTrenutno(); i++)
		{
			if (_police.GetElement(i)->GetBrPolice() == brpol)
			{
				_police.GetElement(i)->GetKnjige().UkloniElement(k);
			}
		}
	}
	bool Zaduzi(int clanskibroj,const char*ISBN) {
		Clan d;
		for (int i = 0; i < _clanovi.GetTrenutno(); i++)
		{
			if (_clanovi.GetElement(i)->GetClanski() == clanskibroj)
			{
				d = *_clanovi.GetElement(i);
			}
		}
		Knjiga k;
		for (int i = 0; i < _police.GetTrenutno(); i++)
		{
			for (int j = 0; j < _police.GetElement(i)->GetKnjige().GetTrenutno(); j++)
			{
				if (strcmp(_police.GetElement(i)->GetKnjige().GetElement(j).GetISBN(),ISBN) == 0)
				{
					if (_police.GetElement(i)->GetKnjige().GetElement(j).ProvjeriZaduzenost(k)==true)
					{
						return false;
					}
					k = _police.GetElement(i)->GetKnjige().GetElement(j);
					_police.GetElement(i)->GetKnjige().GetElement(j).ZaduziKnjigu(d);
					cout << "Knjiga zaduzena." << endl;
				}
			}
		}
	}
	bool Razduzi(int clanskibroj,const char*ISBN)
	{
		Clan d;
		for (int i = 0; i < _clanovi.GetTrenutno(); i++)
		{
			if (_clanovi.GetElement(i)->GetClanski() == clanskibroj)
			{
				d = *_clanovi.GetElement(i);
			}
		}
		for (int i = 0; i < _police.GetTrenutno(); i++)
		{
			for (int j = 0; j < _police.GetElement(i)->GetKnjige().GetTrenutno(); j++)
			{
				if (strcmp(_police.GetElement(i)->GetKnjige().GetElement(j).GetISBN(),ISBN) == 0) {
					_police.GetElement(i)->GetKnjige().GetElement(j).RazduziKnjigu(d);
					return true;
				}
			}
		}
	}
	void operator++()
	{
		for (int i = 0; i < _police.GetTrenutno(); i++)
		{
			for (int j = 0; j < _police.GetElement(i)->GetKnjige().GetTrenutno(); j++)
			{
				_police.GetElement(i)->GetKnjige().GetElement(j).SetZauzetost(1);
			}
		}
	}
	
	//Funkciju koja pronalazi i ispisuje sve slobodne knjige na odredenoj polici (proslijediti broj police kao parametar).

	//Funkciju koja pronalazi knjigu/e na osnovu naslova i/ili pisca i ispisuje sve podatke, kao i to da li je knjiga/e trenutno zadužena.

	//Funkciju koja pronalazi sve knjige koje su zadužene duže od 14 dana i ispisuje podatke o clanovima kod kojih se nalaze.
	friend ostream& operator<<(ostream&cout, Bibilioteka &b);
};
ostream& operator<<(ostream&cout, Bibilioteka &b) {
	cout << "Clanovi biblioteke su:" << endl;
	for (int i = 0; i < b._clanovi.GetTrenutno(); i++)
	{
		cout << *b._clanovi.GetElement(i) << endl;
	}
	cout << "Police na biblioteci su:" << endl;
	for (int i = 0; i < b._police.GetTrenutno(); i++)
	{
		cout << *b._police.GetElement(i) << endl;
	}
	return cout;
}
int main()
{
	Clan c("Abedin Halilovic", "061-602-460");
	//cout << c << endl;
	Knjiga k("Pakao", "987-254-121-234-1", 2011, 10);
	Knjiga k1("Neka knjiga", "911-114-121-234-1", 2012, 9);
	k.ZaduziKnjigu(c);
	k.RazduziKnjigu(c);
	if (k.ProvjeriZaduzenost(k) == true)
		cout << "zad" << endl;
	int br = 1;
	int br1 = 2;
	Polica p(5, br);
	Polica p1(5, br1);
	p.DodajKnjigu(k);
	p.DodajKnjigu(k1);
	p1.DodajKnjigu(k);
	//p.UkloniKnjigu(k);
	cout << "-------------------------" << endl;
	Bibilioteka b("Konjic");
	b += c;
	b.DodajPolicu(p);
	b.DodajPolicu(p1);
	b(k, 1);
	//cout << b << endl;
	b.Ukloni(k, 1);
	b.Zaduzi(1, "911-114-121-234-1");
	b.Razduzi(1, "911-114-121-234-1");
	cout << b << endl;
	++b;
	cout << "-------------------------------------" << endl;
	cout << b << endl;
	//Testirati sve dostupne funkcionalnosti klase Biblioteka
	//Dodati najmanje 5 polica sa po 5 knjiga u objekat klase biblioteka, te uclaniti barem 10 clanova.
	system("pause>0");
	return 0;
}
