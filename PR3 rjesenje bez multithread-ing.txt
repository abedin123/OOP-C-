#include <iostream>
#include <vector>
#include <regex>
#include <string>
#include <thread>
using namespace std;
const char* crt = "-------------------------------------------";
class Datum {
	int *_dan, *_mjesec, *_godina;
public:
	Datum(int dan = 1, int mjesec = 1, int godina = 2000) {
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);
	}
	Datum(const Datum &dat) {
		_dan = new int(*dat._dan);
		_mjesec = new int(*dat._mjesec);
		_godina = new int(*dat._godina);
	}
	void operator=(const Datum &dat) {
		delete _dan; delete _mjesec; delete _godina;
		_dan = _mjesec = _godina = nullptr;
		_dan = new int(*dat._dan);
		_mjesec = new int(*dat._mjesec);
		_godina = new int(*dat._godina);
	}
	~Datum() {
		delete _dan; _dan = nullptr;
		delete _mjesec; _mjesec = nullptr;
		delete _godina; _godina = nullptr;
	}
	bool operator==(const Datum&d)
	{
		return *_dan == *d._dan&&*_mjesec == *d._mjesec&&*_godina == *d._godina;
	}
	friend ostream &operator<<(ostream &COUT, const Datum &obj) {
		COUT << *obj._dan << " " << *obj._mjesec << " " << *obj._godina;
		return COUT;
	}

};
class Izuzetak : public exception {
	string _funkcija;
public:
	Izuzetak(string poruka, string funkcija) :exception(poruka.c_str())
	{
		_funkcija = funkcija;
	}
	void Info() {
		cout << "Greska->>>" << what() << "u funkciji:" << _funkcija << endl;
	}
};

template <class T1, class T2>
class Kolekcija {
	T1 * _elementi1;
	T2 * _elementi2;
	int _trenutnoElemenata;
	bool _omoguciDupliranjeElemenata;
public:
	Kolekcija(bool omoguciDupliranjeElemenata = false) {
		_trenutnoElemenata = 0;
		_omoguciDupliranjeElemenata = omoguciDupliranjeElemenata;
		_elementi1 = nullptr;
		_elementi2 = nullptr;
	}
	Kolekcija(const Kolekcija&k)
	{
		_omoguciDupliranjeElemenata = k._omoguciDupliranjeElemenata;
		_trenutnoElemenata = k._trenutnoElemenata;
		_elementi1 = new T1[_trenutnoElemenata];
		_elementi2 = new T2[_trenutnoElemenata];
		for (int i = 0; i < _trenutnoElemenata; i++)
		{
			_elementi1[i] = k._elementi1[i];
			_elementi2[i] = k._elementi2[i];
		}
	}
	void operator=(const Kolekcija&k)
	{
		delete[]_elementi1;
		delete[]_elementi2;
		_elementi1 = nullptr;
		_elementi2 = nullptr;
		_omoguciDupliranjeElemenata = k._omoguciDupliranjeElemenata;
		_trenutnoElemenata = k._trenutnoElemenata;
		_elementi1 = new T1[_trenutnoElemenata];
		_elementi2 = new T2[_trenutnoElemenata];
		for (int i = 0; i < _trenutnoElemenata; i++)
		{
			_elementi1[i] = k._elementi1[i];
			_elementi2[i] = k._elementi2[i];
		}
	}
	~Kolekcija() {
		delete[]_elementi2; _elementi2 = nullptr;
		delete[]_elementi1; _elementi1 = nullptr;
		_trenutnoElemenata = 0;
	}
	void RemoveElement(T1 t)
	{
		T1 *temp = new T1[_trenutnoElemenata - 1];
		T2 *temp1 = new T2[_trenutnoElemenata - 1];
		int j = 0;
		for (int i = 0; i < _trenutnoElemenata; i++)
		{
			if (_elementi1[i] != t)
			{
				temp[j] = _elementi1[i];
				temp1[j] = _elementi2[i];
				j++;
			}
		}
		delete[]_elementi1;
		delete[]_elementi2;
		_elementi1 = temp;
		_elementi2 = temp1;
		_trenutnoElemenata--;
	}
	bool AddElement(T1 t, T2 t1)
	{
		T1 *temp = new T1[_trenutnoElemenata + 1];
		T2 *temp1 = new T2[_trenutnoElemenata + 1];
		for (int i = 0; i < _trenutnoElemenata; i++)
		{
			if (_elementi1[i] == t && _elementi2[i] == t1)
				return false;
			else
			{
				temp[i] = _elementi1[i];
				temp1[i] = _elementi2[i];
			}
		}
		delete[]_elementi1;
		delete[]_elementi2;
		_elementi1 = temp;
		_elementi2 = temp1;
		_elementi1[_trenutnoElemenata] = t;
		_elementi2[_trenutnoElemenata] = t1;
		_trenutnoElemenata++;
		return true;
	}
	int GetTrenutno() const { return _trenutnoElemenata; }
	T1& GetElement1(int lokacija) const
	{
		if (lokacija < 0 || lokacija >= _trenutnoElemenata)
			throw Izuzetak("Nepostojeca lokacija", __FUNCTION__);
		return _elementi1[lokacija];
	}

	T2& GetElement2(int lokacija) const
	{
		if (lokacija < 0 || lokacija >= _trenutnoElemenata)
			throw Izuzetak("Nepostojeca lokacija", __FUNCTION__);
		return _elementi2[lokacija];
	}

	friend ostream &operator<<(ostream &COUT, const Kolekcija &obj) {
		for (size_t i = 0; i < obj.GetTrenutno(); i++)
			COUT << obj._elementi1[i] << " " << obj._elementi2[i] << endl;
		return COUT;
	}
};

class Dogadjaj
{
	Datum _datumOdrzavanja;
	Kolekcija<string, bool> * _obaveze; //cuva informaciju o obavezama koje je potrebno ispuniti prije samog dogadjaja, string se odnosi na opis, a bool na izvrsenje te obaveze (da li je zavrsena ili ne)

	char *_naziv;
	int _notificirajPrije; //oznacava broj dana prije samog dogadjaja kada ce krenuti notifikacija/podsjetnik
	bool _rekurzivnaNotifikacija; //ako je vrijednost true onda se korisnik notificira svaki dan do _datumaOdrzavanja dogadjaja, a pocevsi prije dogadjaja za _brojDanaZaNotifikaciju

public:
	Dogadjaj(Datum datumOdrzavanja, const char *naziv, int brojDana = 1,
		bool rekurzivnaNotifikacija = false) : _datumOdrzavanja(datumOdrzavanja)
	{
		_naziv = new char[strlen(naziv) + 1];
		strcpy_s(_naziv, strlen(naziv) + 1, naziv);

		_notificirajPrije = brojDana;
		_rekurzivnaNotifikacija = rekurzivnaNotifikacija;
		_obaveze = nullptr;
	}

	bool AddObavezu(string obaveza, vector<string> zabrrijec) {
		if (_obaveze == nullptr)
			_obaveze = new Kolekcija<string, bool>();
		string pravilo = "(?=.*(" + zabrrijec[0] + "))";
		regex obj(pravilo);
		for (int i = 0; i < zabrrijec.size(); i++)
		{
			if (regex_search(obaveza, obj))
			{
				cout << "U obavezi imate nedovzvoljenu rijec." << endl;
				return false;
			}
			else
			{
				pravilo = "(?=.*(" + zabrrijec[i] + "))";
				obj = pravilo;
			}
		}
		if (_obaveze->AddElement(obaveza, false))
			return true;
		return false;
	}
	Dogadjaj(const Dogadjaj &obj) : _datumOdrzavanja(obj._datumOdrzavanja)
	{
		_naziv = new char[strlen(obj._naziv) + 1];
		strcpy_s(_naziv, strlen(obj._naziv) + 1, obj._naziv);

		_notificirajPrije = obj._notificirajPrije;
		_rekurzivnaNotifikacija = obj._rekurzivnaNotifikacija;
		_obaveze = new Kolekcija<string, bool>(*obj._obaveze);
	}
	~Dogadjaj()
	{
		delete[] _naziv;
		_naziv = nullptr;
		delete _obaveze;
		_obaveze = nullptr;
	}
	char *GetNaziv() { return _naziv; }
	Kolekcija<string, bool> *GetObaveze() { return _obaveze; }
	bool operator==(const Dogadjaj&d)
	{
		return _datumOdrzavanja == d._datumOdrzavanja;
	}
	Datum &GetDatumOdrzavanja() { return _datumOdrzavanja; }
	bool DaLiPoslatiMail() {
		if (_rekurzivnaNotifikacija == true && _notificirajPrije == 2)
			return true;
	}
};

class Student
{
	int _indeks;
	string _imePrezime;
	vector<Dogadjaj> _dogadjaji;
public:

	Student(int indeks, string imePrezime) : _indeks(indeks), _imePrezime(imePrezime) {}
	int GetIndeks() const { return _indeks; }
	string GetImePrezime() { return _imePrezime; }
	vector<Dogadjaj>& GetDogadjaji() { return _dogadjaji; }
	bool AddDogadjaj(Dogadjaj &d)
	{
		for (int i = 0; i < _dogadjaji.size(); i++)
		{
			if (_dogadjaji[i] == d)
				return false;
		}
		_dogadjaji.push_back(d);
	}
	bool operator==(const Student&s)
	{
		return _indeks == s._indeks&&_imePrezime == s._imePrezime;
	}
	friend ostream &operator<<(ostream &COUT, const Student &obj)
	{
		COUT << obj._imePrezime << " (" << obj._indeks << ")" << endl;
		return COUT;
	}
};

class DLWMSReminder
{
	vector<Student> _reminiderList;
public:
	DLWMSReminder()
	{

	}
	void AddStudent(Student &s)
	{
		for (int i = 0; i < _reminiderList.size(); i++)
		{
			if (_reminiderList[i] == s)
				throw Izuzetak("Ne mozete dodati dva ista studenta.", __FUNCTION__);
		}
		_reminiderList.push_back(s);
	}
	bool OznaciObavezuKaoZavrsenu(int brojindex, string predmet, string obaveza)
	{
		for (int i = 0; i < _reminiderList.size(); i++)
		{
			if (_reminiderList[i].GetIndeks() == brojindex)
			{
				for (int j = 0; j < _reminiderList[i].GetDogadjaji().size(); j++)
				{
					for (int k = 0; k < _reminiderList[i].GetDogadjaji()[j].GetObaveze()->GetTrenutno(); k++)
					{
						if (_reminiderList[i].GetDogadjaji()[j].GetObaveze()->GetElement1(k) == obaveza)
						{
							_reminiderList[i].GetDogadjaji()[j].GetObaveze()->GetElement2(k) = false;
							return true;
						}
					}
				}
			}
		}
		return false;
	}
	int PosaljiNotifikacije(Datum &d)
	{
		int poslatih = 0;
		string poruka = "Poštovani ";
		for (int i = 0; i < _reminiderList.size(); i++)
		{
			for (int j = 0; j < _reminiderList[i].GetDogadjaji().size(); j++)
			{
				for (int k = 0; k < _reminiderList[i].GetDogadjaji()[j].GetObaveze()->GetTrenutno(); k++)
				{
					if (_reminiderList[i].GetDogadjaji()[j].GetDatumOdrzavanja() == d&&_reminiderList[i].GetDogadjaji()[j].GetObaveze()->GetElement1(k)=="Ispit iz PRIII"&&_reminiderList[i].GetDogadjaji()[j].DaLiPoslatiMail()==true)
					{
						poruka += _reminiderList[i].GetImePrezime()+ " " +"Dogadjaj Ispit iz PRIII je zakazan za 3 dana, a do sada ste obavili 56% obaveza vezanih za ovaj dogadjaj. Neispunjene obaveze su: 1.Preraditi ispitne zadatke 2.Samostalno vjezbati Predlazemo Vam da ispunite i ostale planirane obaveze. FIT Reminder" ;
						poslatih++;
					}
				}
			}
		}
		return poslatih;
	}
};

void main() {

	/**************************************************************************
	1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
	2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR CE BITI OZNACENO KAO "RE"
	3. SPASAVAJTE PROJEKAT KAKO BI SE SPRIJECILO GUBLJENJE URADJENOG ZADATKA
	4. PROGRAMSKI CODE SE TAKODJER NALAZI U FAJLU CODE_ParcijalniII.TXT
	5. NAZIVI FUNKCIJA MORAJU BITI IDENTICNI ONIMA KOJI SU KORIŠTENI U TESTNOM CODE-U.OSTALE, POMOCNE FUNKCIJE MOŽETE IMENOVATI PO ŽELJI.
	****************************************************************************/

#pragma region Datum

	Datum danas(28, 1, 2018), sutra(29, 1, 2018);
	Datum datumIspitaPRIII(30, 1, 2018), datumIspitBPII(31, 1, 2018);
	Datum prekosutra(danas);
	prekosutra = danas;
	cout << danas << endl
		<< sutra << endl
		<< prekosutra << endl; cout << crt << endl;

#pragma endregion

#pragma region Kolekcija


	const int brElemenata = 10;
	Kolekcija<int, float> kolekcija1;
	for (size_t i = 0; i < brElemenata; i++)
		if (!kolekcija1.AddElement(i, i + (0.6 * i)))
			cout << "Elementi " << i << " i " << i + (0.6 * i) << " nisu dodati u kolekciju" << endl;

	cout << kolekcija1.GetElement1(0) << " " << kolekcija1.GetElement2(0) << endl;
	cout << kolekcija1 << endl;

	kolekcija1.RemoveElement(1);

	Kolekcija<int, float> kolekcija2;
	kolekcija2 = kolekcija1;
	cout << kolekcija2 << crt << endl;

	if (kolekcija1.GetTrenutno() == kolekcija2.GetTrenutno())
		cout << "ISTI BROJ ELEMENATA" << endl;

	Kolekcija<int, float> kolekcija3(kolekcija2);
	cout << kolekcija3 << crt << endl;

#pragma endregion

#pragma region Dogadjaj

	Dogadjaj ispitPRIII(datumIspitaPRIII, "Ispit iz PRIII", 5, true),
		ispitBPII(datumIspitBPII, "Ispit iz BPII", 7, true);
	vector<string> zabrrijec;
	zabrrijec.push_back("Rat");
	zabrrijec.push_back("Ubiti");
	zabrrijec.push_back("krv");

	/*po vlasitom izboru definisati listu zabranjenih rijeci koje ce onemoguciti dodavanje odredjene obaveze. Prilikom provjere koristiti regex*/
	if (ispitPRIII.AddObavezu("Preraditi pdf materijale", zabrrijec))cout << "Obaveza dodana!" << endl;
	//onemoguciti dupliranje obavezas
	if (!ispitPRIII.AddObavezu("Preraditi pdf materijale", zabrrijec))cout << "Obaveza nije dodana!" << endl;
	if (ispitPRIII.AddObavezu("Pregledati video materijale", zabrrijec))cout << "Obaveza dodana!" << endl;
	if (ispitPRIII.AddObavezu("Preraditi ispitne zadatke", zabrrijec))cout << "Obaveza dodana!" << endl;
	if (ispitPRIII.AddObavezu("Samostalno vjezbati", zabrrijec))cout << "Obaveza dodana!" << endl;

	if (ispitBPII.AddObavezu("Preraditi knjigu SQL za 24 h", zabrrijec))cout << "Obaveza dodana!" << endl;
	if (ispitBPII.AddObavezu("Pregledati video materijale", zabrrijec))cout << "Obaveza dodana!" << endl;
	if (ispitBPII.AddObavezu("Napraviti bazu za konkretnu aplikaciju", zabrrijec))cout << "Obaveza dodana!" << endl;

	Student jasmin(150051, "Jasmin Azemovic"), adel(160061, "Adel Handzic");

	if (jasmin.AddDogadjaj(ispitPRIII) && jasmin.AddDogadjaj(ispitBPII))
		cout << "Dogadjaj uspjesno dodan!" << endl;

	if (adel.AddDogadjaj(ispitPRIII) && adel.AddDogadjaj(ispitBPII))
		cout << "Dogadjaj uspjesno dodan!" << endl;
	//onemoguciti dupliranje dogadjaja
	if (!adel.AddDogadjaj(ispitPRIII))
		cout << "Dogadjaj nije uspjesno dodan!" << endl;

	DLWMSReminder reminder;

	try
	{
		reminder.AddStudent(jasmin);
		reminder.AddStudent(adel);
		//u slucaju dupliranja studenata funkcija baca izuzetak tipa Izuzetak
		reminder.AddStudent(jasmin);
	}
	catch (Izuzetak &err)
	{
		err.Info();
	}

	//da bi bila oznacena kao zavrsena, obaveza mora postojati i mora biti oznacena kao nezavrsena (false)
	if (reminder.OznaciObavezuKaoZavrsenu(150051, "Ispit iz PRIII", "Pregledati video materijale"))
		cout << "Obaveza oznacena kao zavrsena" << endl;
	thread saljenotifikacije(&DLWMSReminder::PosaljiNotifikacije, datumIspitaPRIII);
	saljenotifikacije.join();
	/*metodi PosaljiNotifikacije se salje trenutni datum na osnovu cega ona pretrazuje sve studente koje treba podsjetiti/notoficirati o dogadjajima
	koji se priblizavaju.
	Koristeci multithread-ing, svim studentima se salju notifikacije sa sljedecim sadrzajem:
	-------------------------------------------------------------------------
	Postovani Jasmin Azemovic,
	Dogadjaj Ispit iz PRIII je zakazan za 3 dana, a do sada ste obavili 56% obaveza vezanih za ovaj dogadjaj. Neispunjene obaveze su:
	1.Preraditi ispitne zadatke
	2.Samostalno vjezbati
	Predlazemo Vam da ispunite i ostale planirane obaveze.
	FIT Reminder
	-------------------------------------------------------------------------
	Dakle, notifikacije ce biti poslane svim studentima koji su dodali dogadjaj za 30.01.2018. godine i oznacili da zele da budu podsjecani
	ponovo/rekurzivno najmanje 2 dana prije samog dogadjaja (podaci se odnose na konkretan dogadjaj: Ispit iz PRIII)

	*/
	int poslato = 0;
	//funkcija vraca broj poslatih podsjetnika/notifikacija
	poslato = reminder.PosaljiNotifikacije(danas);
	cout << "Za " << danas << " poslato ukupno " << poslato << " podsjetnika!" << endl;
	poslato = reminder.PosaljiNotifikacije(sutra);
	cout << "Za " << sutra << " poslato ukupno " << poslato << " podsjetnika!" << endl;

#pragma endregion
	system("pause");
}
