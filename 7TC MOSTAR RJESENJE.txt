#include <iostream>
#include <regex>
#include <thread>
#include <mutex>
#include <vector>
#include <ctime>
using namespace std;
const char *crt = "\n-------------------------------------------\n";
enum OznakaKrvneGrupe { O, A, B, AB };
mutex MojMutex;

char* OznakaKrvneGrupeString[] = { "O", "A", "B", "AB" };
class Datum {
	int _dan, _mjesec, _godina;
public:
	Datum(int dan, int mjesec, int godina) :
		_dan(dan), _mjesec(mjesec), _godina(godina) {}
	string ToString(char separator='.') const
	{
		// 21.03.2006
		string datum;
		datum += to_string(_dan);
		datum += separator;
		datum += to_string(_mjesec);
		datum += separator;
		datum += to_string(_godina);
		return datum;
	}
	bool RazlikaDatumaTriMjeseca( Datum & dat)// Bolje rješenje bi bilo pretvoriti datume u dane pa izracunati razliku
	{
		//TODO:**Nepotpuno rješenje
		int razlikaMjeseci = abs(_mjesec - dat._mjesec);
		if (_godina>dat._godina)//Ako je godina zahtjeva nastala prije godine donacije unos nije ispravan
		{
			cout << "Greska!Godina nije validna"; return false;
		}
		if (dat._godina == _godina)
		{
			if (_mjesec > dat._mjesec)//Ako je mjesec zahtjeva nastao prije mjeseca za istu godinu donacije unos nije ispravan
			{
				cout << "Greska! Mjesec nije validna"; return false;
			}
			else if (razlikaMjeseci < 3)//Ako je ista godina a razlika izmedju mjeseci je manja od 3 vrati false
			{
				return false;
			}
		}
		else if (_godina == dat._godina - 1)// Ako je godina donacije prosla godina u odnosu na zahtjev
			{
				if (_mjesec > 9 && dat._mjesec > 3)//Ako mjeseci nisu u prelazu izmedju 10. i 2. mjeseca
					return true;
				else if(razlikaMjeseci<9)// Za prelaz izmedju 2 godine razlika ce biti veca od tri mjeseca ako je 
										// razlika (mj donacije-mj zahtjeva) veca od 8. Npr: 10-2=8(11,12,1->3);12-3=9(1,2->2)
				{
					return true;
				}
				else return false;
			}
		else //ako je proslo vise godina izmedju donacije i zahtjeva prosla su i tri mjeseca.
		{
			return true;
		}
	}
};
template <class T1, class T2, int max>
class Kolekcija {
	T1 _elementi1[max];
	T2 _elementi2[max];
	int _trenutnoElemenata;
	int _keyElement; // kljucni element, a podrazumijevano T1 predstavlja kljucni 
					// element i tada je vrijednost 1, a u slucaju da je T2 onda ce vrijednost biti 2
public:
	Kolekcija(int keyElement = 1) {
		_trenutnoElemenata = 0;
		_keyElement = keyElement;
	}
	bool AddElement(T1 ele1, T2 ele2) {
		if (_trenutnoElemenata == max)
			return false;
		_elementi1[_trenutnoElemenata] = ele1;
		_elementi2[_trenutnoElemenata] = ele2;
		_trenutnoElemenata++;
		return true;
	}
	void SetElement2(int lokacija, T2 ele2) {
		_elementi2[lokacija] = ele2;
	}
	void SetKeyElement(int keyElement) {
		if (keyElement < 1 || keyElement>2)
			throw exception("Nedozvoljena vrijednost!");
		_keyElement = keyElement;
	}
	void Zamijeni(int i,int j)
	{
		T1 temp1 = _elementi1[i];
		T2 temp2 = _elementi2[i];
		_elementi1[i] = _elementi1[j];
		_elementi2[i] = _elementi2[j];
		_elementi1[j] = temp1;
		_elementi2[j] = temp2;
	}
	T1 * GetElementi1() { return _elementi1; }
	T2 * GetElementi2() { return _elementi2; }

	void Sort(string filter)
	{
		if (filter =="ASC")
		{
			for (size_t i = 0; i < _trenutnoElemenata-1; i++)
			{
				if (_elementi1[i]>_elementi1[i+1])
				{
						for (size_t j =i; j < _trenutnoElemenata-1; j++)
						{
							if (_elementi1[j] > _elementi1[j + 1])
							{
								Zamijeni(j, j + 1);
							}
						}
				}
			}
		}
		// 0123456789
		// 9876543210

		else if (filter == "DESC")
		{
			for (size_t i = 0; i < _trenutnoElemenata-1; i++)
			{
				if (_elementi1[i+1]>_elementi1[i])
				{
					Zamijeni(i, i + 1);
					for (size_t j = i+1; j > 0; j--)
					{
						if (_elementi1[j]>_elementi1[j-1])
						{
							Zamijeni(j, j - 1);
						}
					}
				}
			}
		}
		else cout << "Pogresan format sortiranja!" << endl;
	}
	int GetTrenutno() const { return _trenutnoElemenata; }
	int GetMax() const { return max; }
	T1 GetElement1(int lokacija) const {
		if (lokacija < 0 || lokacija >= _trenutnoElemenata)
			throw exception("Nepostojeca lokacija!");
		return _elementi1[lokacija];
	}
	T2 GetElement2(int lokacija) const {
		if (lokacija < 0 || lokacija >= _trenutnoElemenata)
			throw exception("Nepostojeca lokacija!");
		return _elementi2[lokacija];
	}
	friend ostream &operator<<(ostream &COUT, const Kolekcija &obj) {
		for (size_t i = 0; i < obj.GetTrenutno(); i++)
			COUT << obj.GetElement1(i) << " " << obj.GetElement2(i) << endl;
		return COUT;
	}
};
class KrvnaGrupa {
	/*postoje 4 krvne grupe koje su navedene u enumeracije OznakaKrvneGrupe, pri cemu
	svaka od navedenih moze imati pozitivan (+) i negativan (-) Rh faktor*/
	OznakaKrvneGrupe _oznaka;//npr: AB
	char _rhFaktor; // + ili -
					/*prethodno pomenuto je izuzetno bitno iz razloga sto
					postoje jasna pravila vezana za darivanje krvi tj. koji primalac moze primiti krv od
					kojeg donatora sto je prikazano u tabeli, a naredna dva vector-a su zaduzena da cuvaju
					informacije o tome, npr. za krvnu grupu A+ vector donatori ce cuvati vrijednosti: A+ i
					AB+ */
	vector<KrvnaGrupa> _donatori; //krvne grupe kojima odredjena krvna grupa moze donirati krv.
	vector<KrvnaGrupa> _primaoci; //krvne grupe od kojih odredjena krvna grupa moze	primiti krv.
public:
	KrvnaGrupa(OznakaKrvneGrupe oznaka=O, char rhFaktor=' ') :
		_oznaka(oznaka), _rhFaktor(rhFaktor) {}
	KrvnaGrupa(const KrvnaGrupa &k) :_oznaka(k._oznaka), _rhFaktor(k._rhFaktor), _donatori(k._donatori), _primaoci(k._primaoci) { ; }
	KrvnaGrupa & operator=(const KrvnaGrupa &k) {
		_oznaka = (k._oznaka);
		_rhFaktor = (k._rhFaktor);
		_donatori = (k._donatori);
		_primaoci=(k._primaoci)  ;
		return *this;
	}

	void SetDonatori(vector<KrvnaGrupa> donatori) {
		_donatori = donatori;
	}
	void SetPrimaoci(vector<KrvnaGrupa> primaoci) {
		_primaoci = primaoci;
	}
	friend bool operator==(const KrvnaGrupa & k1, const KrvnaGrupa & k2)
	{
		return k1._oznaka == k2._oznaka && k2._rhFaktor == k1._rhFaktor;
	}
	string ToString() const
	{
		string ispis;

		ispis += crt + string("Krvna grupa ->");
		ispis += string(OznakaKrvneGrupeString[_oznaka]) + _rhFaktor;
		ispis += string(crt)+"Donori ->";
		for (size_t i = 0; i < _donatori.size(); i++)
		{
			ispis += string(OznakaKrvneGrupeString[_donatori[i]._oznaka]) + _donatori[i]._rhFaktor + ',';
		}
		ispis += crt;
		for (size_t i = 0; i < _primaoci.size(); i++)
		{
			ispis += string(OznakaKrvneGrupeString[_primaoci[i]._oznaka]) + _primaoci[i]._rhFaktor + ',';
		}
		return ispis + crt;
	}
};
//Klasu proglasiti apstraktnom
class Osoba {
protected:
	char* _imePrezime;
	KrvnaGrupa _krvnaGrupa;
public:
	Osoba(char* imePrezime, KrvnaGrupa krvnaGrupa) : _krvnaGrupa(krvnaGrupa) {
		int size = strlen(imePrezime) + 1;
		_imePrezime = new char[size];
		strcpy_s(_imePrezime, size, imePrezime);
	}
	Osoba(const Osoba &k) :_krvnaGrupa(k._krvnaGrupa)
	{
			int size = strlen(k._imePrezime) + 1;
			_imePrezime = new char[size];
			strcpy_s(_imePrezime, size, k._imePrezime);
	}
	const Osoba & operator=(const Osoba &k)
	{
		if (this != &k)
		{
			_krvnaGrupa=(k._krvnaGrupa);
			int size = strlen(k._imePrezime) + 1;
			_imePrezime = new char[size];
			strcpy_s(_imePrezime, size, k._imePrezime);
		}
		return k;
	}
	char * getIme() { return _imePrezime; }
	~Osoba() {
		delete[] _imePrezime;
		_imePrezime = nullptr;
	}
	virtual void Info() = 0;
	KrvnaGrupa * GetKrvna() { return &_krvnaGrupa; }
};
class Donator : public Osoba {
	//u slucaju da broj telefona nije u validnom formatu potrebno ga je postaviti napodrazumijevanu vrijednost : 000 - 000 - 000
		string _telefon; //regex: 000/000-000 ili 000-000-000
	Datum _datumPosljednjegDoniranja;
	bool _podsjetiMe;
	bool _kontaktirajMe;
public:
	Donator(char* imePrezime, KrvnaGrupa krvnaGrupa, string telefon, Datum dpd, bool
		remind = true, bool contact = true)
		: Osoba(imePrezime, krvnaGrupa), _datumPosljednjegDoniranja(dpd),_podsjetiMe(remind),_kontaktirajMe(contact) {
		if (ValidanFormat(telefon))
			_telefon = telefon;
		else
			_telefon = "000-000-000";
	}
	bool getPodsjetnik() { return _podsjetiMe; }
	bool getKontaktirajMe() { return _kontaktirajMe; }
	Datum getDatum() { return _datumPosljednjegDoniranja ; }

	void SetDatum(Datum dat) { _datumPosljednjegDoniranja = dat; }
	bool ValidanFormat(string telefon)
	{
		string pravilo= "(\\d{3})([-/])?(\\d{3})([/-])?(\\d{3})";
		if (regex_match(telefon,regex(pravilo)) )
		{
			return true;
		}

		else
		{
			int broj = 10;
			char Telefon[11];
			for (size_t i = (telefon.size()); i > 0; i--)
			{
				if ((int)telefon[i]>46 && (int)telefon[i]<58)
				{
					Telefon[broj--] = telefon[i];
					if (broj==8 || broj ==4)
					{
						Telefon[broj--] = '-';
					}
				}
			}
			_telefon = Telefon;
			cout << "Telefon u fji:" << telefon << " , zamijenjen sa:" << Telefon << endl;
		}

	}
	void Info() {
		cout << "Donator!";
	}
};
class Zahtjev {
	string _ustanova;
	Datum _datumZahtjeva;
	KrvnaGrupa _krvnaGrupa;
	double _kolicina;
public:
	Zahtjev(string ustanova=" ", Datum datum=Datum(1,1,2011), KrvnaGrupa krvnaGrupa=O, double kolicina=0) :
		_ustanova(ustanova), _datumZahtjeva(datum), _krvnaGrupa(krvnaGrupa),
		_kolicina(kolicina) { }
	friend ostream& operator<<(ostream& COUT, const Zahtjev& obj) {
		COUT << "Ustanova: " << obj._ustanova << endl;
		COUT << "Datum: " << obj._datumZahtjeva.ToString() << endl;
		COUT << "Krvna grupa: " << obj._krvnaGrupa.ToString() << endl;
		COUT << "Kolicina: " << obj._kolicina << endl;
		return COUT;
	}
	const KrvnaGrupa & getKrvna() { return _krvnaGrupa; }
	double getKolicina() { return _kolicina; }
	Datum getDatum() { return _datumZahtjeva; }
};
class TransfuzijskiCentar {
	//stanje zaliha za svaku pojedinu krvnu grupu
	Kolekcija<KrvnaGrupa*, double, 8> _zalihe;
	//evidentira svaku donaciju krvi
	Kolekcija<Osoba *, double, 100> _donacije;
	vector<Zahtjev> _zahtjevi;
public:
	void AddDonaciju(Datum dat,Osoba * donor,double kolicina)
	{
		Donator * donorD = dynamic_cast<Donator*>(donor);
		if (donorD != NULL)
		{
		bool postoji = false;
		for (size_t i = 0; i < _zalihe.GetTrenutno(); i++)
		{
			if (_zalihe.GetElement1(i)==donorD->GetKrvna())
			{
				_zalihe.SetElement2(i, _zalihe.GetElement2(i)+ kolicina);
				postoji = true; break;
			}
		}
		donorD->SetDatum(dat);
		_donacije.AddElement(donor, kolicina);
		if (!postoji)
		{
			_zalihe.AddElement(donorD->GetKrvna(), kolicina);
		}
		}
	}
	
	bool Obavijesten(string *niz,int br,string ime)
	{
		for (size_t i = 0; i <br; i++)
		{
			if (niz[i]==ime)
			{
				return true;
			}
		}
		return false;
	}
	void PosaljiSMS(Zahtjev & z)
	{
		string * obavjesten = new string[_donacije.GetTrenutno() + 1];
		int brOb = 0;
		for (size_t i = 0; i < _donacije.GetTrenutno(); i++)
		{
			if (*_donacije.GetElement1(i)->GetKrvna()==z.getKrvna())
			{
				Donator * d = dynamic_cast<Donator *>(_donacije.GetElement1(i));
				if (d!=nullptr)
				{
					if (d->getKontaktirajMe()==true && d->getDatum().RazlikaDatumaTriMjeseca(z.getDatum()))
					{
						string donator = _donacije.GetElement1(i)->getIme();
						if (Obavijesten(obavjesten, brOb, donator))
						{
							return;
						}
						obavjesten[brOb++] = donator ;
						cout << donator << " potrebna dodatna kolicina vase krvne grupe" << endl;
					}
				}
			}
		}
	}
	void DodajZahtjev(Zahtjev & zahtjev)
	{
		for (size_t i = 0; i < _zalihe.GetTrenutno(); i++)
		{
			if (*_zalihe.GetElement1(i)==zahtjev.getKrvna() && _zalihe.GetElement2(i)>=zahtjev.getKolicina())
			{
				_zalihe.SetElement2(i, _zalihe.GetElement2(i) - zahtjev.getKolicina());
				cout << "Uspjesno ispunjen zahtjev!";
				return;
			}
		}
		thread novi(&TransfuzijskiCentar::PosaljiSMS,*this, (zahtjev));
		novi.join();
	}
	void GetZahvalnice(int a)
	{
		//printa zahvalnice (zahvaljujemo se ime i prezime donatoru na ukupno doniranih X doza krvi) za TOP 2 donatora krvi
		Kolekcija<string, int, 100> donatori;
		for (size_t i = 0; i < _donacije.GetTrenutno(); i++)
		{
			int UkupnoJednogDonatora = 0;
			string donator = _donacije.GetElement1(i)->getIme();
			for (size_t j = i; j < _donacije.GetTrenutno(); j++)
			{
				if (donator== _donacije.GetElement1(j)->getIme())
				{
					UkupnoJednogDonatora++;
				}
			}
			if (!Obavijesten(donatori.GetElementi1(),donatori.GetTrenutno(),donator))
			{	
				donatori.AddElement(donator, UkupnoJednogDonatora);
			}
		}
		donatori.Sort("ASC");
		for (size_t i = 0; i < a; i++)
		{
			cout<< "Zahvaljujemo se " << donatori.GetElement1(i) << " na ukupno doniranih "<< donatori.GetElement2(i)<< " doza krvi"<<endl;
		}
	}
};
void main() {
	/**************************************************************************
	1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
	2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI
	UZROKUJU RUNTIME ERROR CE BITI OZNACENO KAO "RE"
	3. SPASAVAJTE PROJEKAT KAKO BI SE SPRIJECILO GUBLJENJE URADJENOG ZADATKA
	4. PROGRAMSKI CODE SE TAKODJER NALAZI U FAJLU code.TXT
	5. NAZIVI FUNKCIJA MORAJU BITI IDENTICNI ONIMA KOJI SU KORIŠTENI U TESTNOM CODEU.OSTALE,
	POMOCNE FUNKCIJE MOŽETE IMENOVATI PO ŽELJI. TAKOÐER, MOŽETE DODAVATI KOLIKO
	ŽELITE TESTNIH PODATAKA
	****************************************************************************/
	Datum dat_12_01_2018(12, 1, 2018), dat_01_02_2018(1, 2, 2018);
	cout << dat_01_02_2018.ToString() << endl; //podrazumijevani separator je tacka	".", pa ispisuje 1.2.2018
		cout << dat_12_01_2018.ToString('/') << endl; //separator je proslijedjen, pa	ispisuje 12 / 1 / 2018
		Kolekcija<int, int, 10> kolekcija1;
	for (size_t i = 0; i < kolekcija1.GetMax(); i++)
		if (!kolekcija1.AddElement(i, 170000 + i))
			cout << "Elementi " << i << " i " << 170000 + i << " nisu dodati u kolekciju" << endl;
			cout << kolekcija1.GetElement1(0) << " " << kolekcija1.GetElement2(0) << endl;
	kolekcija1.Sort("ASC"); //kljucne rijeci za sortiranje su ASC i DESC, a sortiranje
						//	se vrsi prema kljucnom elementu
		cout << kolekcija1 << endl << endl << endl;
	kolekcija1.Sort("DESC");
	cout << kolekcija1 << endl;
	kolekcija1.SetKeyElement(2);//postavlja kljucni element na T2
	kolekcija1.Sort("DESC"); //sada se sortiranje vrsi po elementu T2
	cout << kolekcija1 << endl;
	KrvnaGrupa
		O_poz(O, '+'), O_neg(O, '-'),
		A_poz(A, '+'), A_neg(A, '-'),
		B_poz(B, '+'), B_neg(B, '-'),
		AB_poz(AB, '+'), AB_neg(AB, '-');
	vector<KrvnaGrupa> donori_O_poz{ O_poz, A_poz, B_poz, AB_poz };
	O_poz.SetDonatori(donori_O_poz);
		//ili krace napisano
	O_poz.SetPrimaoci(vector<KrvnaGrupa>{O_poz, O_neg});
	A_poz.SetDonatori(vector<KrvnaGrupa>{A_poz, AB_poz});
	A_poz.SetPrimaoci(vector<KrvnaGrupa>{O_poz, A_poz, O_neg, A_neg});
	B_poz.SetDonatori(vector<KrvnaGrupa>{B_poz, AB_poz});
	B_poz.SetPrimaoci(vector<KrvnaGrupa>{O_poz, B_poz, O_neg, B_neg});
	/*
	Ispis podataka o krvnoj grupi treba biti u formatu:
	-------------------------------------------
	Krvna grupa -> 0+
	-------------------------------------------
	Donori -> 0+, A+, B+, AB+
	Primaoci -> 0+, 0-
	-------------------------------------------
	*/
	cout << O_poz.ToString() << endl;
	Osoba * jasmin = new Donator("Jasmin Azemovic", B_poz, "061-111-222", Datum(12, 2,2017), true, true);
	Osoba * adel = new Donator("Adel Handzic", A_neg, "061-222-333", Datum(9, 1, 2017),true, true);
	Osoba * goran = new Donator("Goran Skondric", B_neg, "061-333-444", Datum(9, 3,2017), true, true);
	TransfuzijskiCentar tcMostar;
	/*
	prilikom svake donacije je potrebno povecati zalihe za tu krvnu grupu
	ukoliko krvna grupa vec postoji na zalihi onda se uvecava samo njena kolicina
	takodjer, donatoru se postavlja nova vrijednost datuma posljednje donacije
	*/
	//datum donacije, donator, kolicina
	tcMostar.AddDonaciju(Datum(20, 5, 2017), jasmin, 2.5);
	tcMostar.AddDonaciju(Datum(20, 5, 2017), adel, 3);
	tcMostar.AddDonaciju(Datum(6, 5, 2017), goran, 1.2);
	tcMostar.AddDonaciju(Datum(10, 9, 2017), jasmin, 2);
	tcMostar.AddDonaciju(Datum(18, 10, 2017), adel, 1.8);
	tcMostar.AddDonaciju(Datum(15, 9, 2017), goran, 3.8);
	Zahtjev zahtjev_0_poz("Tranfuziologija KCUS", Datum(18, 2, 2018), O_poz, 15),
		zahtjev_0_neg("Tranfuziologija Bakir Nakas", Datum(20, 2, 2018), O_neg, 8),
		neki("nesto", Datum(1, 1, 2018), B_poz,9);
	/*ukoliko transfuzijski centar posjeduje zahtijevane kolicine na stanju, odmah ce
	ih ustupiti prema zahtjevu,
	a u slucaju da ne posjeduje onda ce (koristeci multithreading) kontaktirati
	(poslati SMS poruku sa odgovarajucim sadrzajem)
	sve donore koji zadovoljavaju sljedece uslove:
	- mogu donirati krv zahtijevanoj krvnoj grupi
	- oznacili su da zele biti kontaktirani
	- nisu davali krv u posljednja 3 mjeseca
	*/
	tcMostar.DodajZahtjev(zahtjev_0_poz);
	tcMostar.DodajZahtjev(zahtjev_0_neg);
	tcMostar.DodajZahtjev(neki);
	//printa zahvalnice (zahvaljujemo se ime i prezime donatoru na ukupno doniranih X doza krvi) za TOP 2 donatora krvi
	tcMostar.GetZahvalnice(2);
	delete adel;
	delete jasmin;
	delete goran;

	system("pause>FIT");
}