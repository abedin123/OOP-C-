#include <iostream>
#include <ostream>
using namespace std;

template<class T1, class T2>
class Kolekcija {
	T1 * _elementi1;
	T2 * _elementi2;
	int _trenutnoElemenata;
public:
	Kolekcija()
	{
		_elementi1 = nullptr;
		_elementi2 = nullptr;
		_trenutnoElemenata = 0;
	}
	Kolekcija(const Kolekcija &k)
	{
		_elementi1 = new T1[k._trenutnoElemenata + 1];
		_elementi2 = new T2[k._trenutnoElemenata + 1];
		for (int i = 0; i < k._trenutnoElemenata; i++)
		{
			_elementi1[i] = k._elementi1[i];
			_elementi2[i] = k._elementi2[i];
		}
		_trenutnoElemenata = k._trenutnoElemenata;
	}
	~Kolekcija()
	{
		if (_elementi1 != nullptr)
		{
			delete[]_elementi1;
			_elementi1 = nullptr;
		}
		if (_elementi2 != nullptr)
		{
			delete[]_elementi2;
			_elementi2 = nullptr;
		}
	}
	bool AddElement(T1 ele1, T2 ele2)
	{
		T1 *temp = new T1[_trenutnoElemenata + 1];
		T2 *temp1 = new T2[_trenutnoElemenata + 1];
		for (int i = 0; i < _trenutnoElemenata; i++)
		{
			temp[i] = _elementi1[i];
			temp1[i] = _elementi2[i];
		}
		delete[]_elementi1;
		delete[]_elementi2;
		_elementi1 = temp;
		_elementi2 = temp1;
		_elementi1[_trenutnoElemenata] = ele1;
		_elementi2[_trenutnoElemenata] = ele2;
		_trenutnoElemenata++;
		return true;
	}
	void operator=(const Kolekcija &k)
	{
		_elementi1 = new T1[k._trenutnoElemenata + 1];
		_elementi2 = new T2[k._trenutnoElemenata + 1];
		for (int i = 0; i < k._trenutnoElemenata; i++)
		{
			_elementi1[i] = k._elementi1[i];
			_elementi2[i] = k._elementi2[i];
		}
		_trenutnoElemenata = k._trenutnoElemenata;
	}
	void Info()
	{
		for (int i = 0; i < _trenutnoElemenata; i++)
		{
			cout << _elementi1[i] << endl;
			cout << _elementi2[i] << endl;
		}
	}
	T1 Element1(int lokacija) { return _elementi1[lokacija]; }
	T2 Element2(int lokacija) { return _elementi2[lokacija]; }
	int trenutnoEle()const { return _trenutnoElemenata; }
	void SetElement1(int lokacija,T1 t)
	{
		_elementi1[lokacija] = t;
	}
	void SetElement2(int lokacija, T2 t)
	{
		_elementi2[lokacija] = t;
	}
	friend ostream& operator<<<>(ostream &cout, Kolekcija <T1, T2> &k);
	bool RemoveElement(int index)
	{
		T1 *temp = new T1[_trenutnoElemenata - 1];
		T2 *temp1 = new T2[_trenutnoElemenata - 1];
		int j = 0;
		for (int i = 0; i < _trenutnoElemenata; i++)
		{
			if (i != index)
			{
				temp[j] = _elementi1[i];
				temp1[j++] = _elementi2[i];
			}
		}
		delete[]_elementi1;
		delete[]_elementi2;
		_elementi1 = temp;
		_elementi2 = temp1;
		_trenutnoElemenata--;
		return true;
	}
	void UvecajTrenutno() { _trenutnoElemenata++; }
};
template<class T1, class T2>
ostream& operator<<<> (ostream &cout, Kolekcija <T1, T2> &k)
{
	for (int i = 0; i < k._trenutnoElemenata; i++)
	{
		cout << k._elementi1[i]<<endl;
		cout << k._elementi2[i] << endl;
	}
	return cout;
}
class Datum {
	int *_dan, *_mjesec, *_godina;
public:
	Datum(int dan = 1, int mjesec = 1, int godina = 2000) {
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);
	}
	Datum(const Datum &d)
	{
		_dan = new int(*d._dan);
		_mjesec = new int(*d._mjesec);
		_godina = new int(*d._godina);
	}
	~Datum() {
		if (_dan != nullptr)
		{
			delete _dan; _dan = nullptr;
			delete _mjesec; _mjesec = nullptr;
			delete _godina; _godina = nullptr;
		}
	}
	void operator=(const Datum &d)
	{
		_dan = new int(*d._dan);
		_mjesec = new int(*d._mjesec);
		_godina = new int(*d._godina);
	}
	friend ostream& operator<< (ostream &COUT, Datum &obj) {
		COUT << *obj._dan << " " << *obj._mjesec << " " << *obj._godina;
		return COUT;
	}
	bool operator==(const Datum &d)
	{
		if (*_dan == *d._dan&&*_mjesec == *d._mjesec&&*_godina == *d._godina)
			return true;
		else
			return false;
	}
};
class Student {
	char * _imePrezime;
	Datum * _datumRodjenja;
public:
	Student(const char * imePrezime = "---", Datum d = Datum()) {
		int size = strlen(imePrezime) + 1;
		_imePrezime = new char[size];
		strcpy_s(_imePrezime, size, imePrezime);
		_datumRodjenja = new Datum(d);

	}
	Student(const Student &s)
	{
		_imePrezime = new char[strlen(s._imePrezime) + 1];
		strcpy_s(_imePrezime, strlen(s._imePrezime) + 1, s._imePrezime);
		_datumRodjenja = new Datum(*s._datumRodjenja);
	}
	void operator=(const Student &s)
	{
		_imePrezime = new char[strlen(s._imePrezime) + 1];
		strcpy_s(_imePrezime, strlen(s._imePrezime) + 1, s._imePrezime);
		_datumRodjenja = new Datum(*s._datumRodjenja);
	}
	bool operator==(const Student &s)
	{
		if (strcmp(_imePrezime, s._imePrezime) == 0 && *_datumRodjenja == *s._datumRodjenja)
			return true;
		else
			return false;
	}
	~Student() { 
		if(_imePrezime!=nullptr)
			delete[] _imePrezime; delete _datumRodjenja; 
	}
	friend ostream& operator<<(ostream&cout, Student &s)
	{
		cout << s._imePrezime << " " << *s._datumRodjenja << endl;
		return cout;
	}
	char *imeprez() { return _imePrezime; }
	Datum *datumrodj() { return _datumRodjenja; }
};
class Ispit {
	Datum _datumOdrzavanja;
	char * _opisIspita;
	Kolekcija<Student, Datum> _prijave;
	Kolekcija<Student, int> _rezultati;
public:
	Ispit(const char* predmetispit="---", Datum d=Datum())
	{
		_datumOdrzavanja = d;
		int size = strlen(predmetispit) + 1;
		_opisIspita = new char[strlen(predmetispit) + 1];
		strcpy_s(_opisIspita, size, predmetispit);
	}
	Ispit(const Ispit&i)
	{
		_datumOdrzavanja = i._datumOdrzavanja;
		int size = strlen(i._opisIspita) + 1;
		_opisIspita = new char[size];
		strcpy_s(_opisIspita, size, i._opisIspita);
		_prijave = i._prijave;
		_rezultati = i._rezultati;
	}
	~Ispit()
	{
		if (_opisIspita != nullptr)
		{
			delete[]_opisIspita;
			_opisIspita = nullptr;
		}
	}
	void operator=(const Ispit &i)
	{
		_datumOdrzavanja = i._datumOdrzavanja;
		_opisIspita = new char[strlen(i._opisIspita) + 1];
		strcpy_s(_opisIspita, strlen(i._opisIspita) + 1, i._opisIspita);
		_prijave = i._prijave;
		_rezultati = i._rezultati;
	}
	friend ostream& operator<< (ostream &COUT, Ispit &i) {
		COUT << i._datumOdrzavanja << " " << i._opisIspita << endl;
		COUT << i._prijave << endl;
		COUT << i._rezultati << endl;
		return COUT;
	}
	bool DodajPrijavu(Student s, Datum d)
	{
		if (_prijave.trenutnoEle() == 0)
		{
			_prijave.AddElement(s, d);
			return true;
		}
		else
		{
			for (int i = 0; i < _prijave.trenutnoEle(); i++)
			{
				if (_prijave.Element1(i) == s)
				{
					cout << "Ne mozete dva puta dodati istog studenta." << endl;
					return false;
				}
				else
				{
					_prijave.AddElement(s, d);
					return true;
				}
			}
		}
	}
	void Info() {
		_prijave.Info();
		_rezultati.Info();
	}
	bool DodajRezultat(Student s, int ocjena)
	{
		if (_rezultati.trenutnoEle() == 0)
		{
			for (int i = 0; i < _prijave.trenutnoEle(); i++)
			{
				if (_prijave.Element1(i) == s)
				{
					_rezultati.AddElement(s, ocjena);
					cout << "Dodali ste ocjenu studentu." << endl;
					return true;
				}
			}
		}

		for (int i = 0; i < _prijave.trenutnoEle(); i++)
		{
			if(_prijave.Element1(i)==s)
			{
				_rezultati.AddElement(s, ocjena);
				cout << "Dodali ste ocjenu studentu." << endl;
				return true;
			}
		}
		cout << "Ne mozete dodati ocjenu studentu koji nije dodat u niz." << endl;
		return false;
	}
	void Sortiraj()
	{
		bool provjera = true;
		do
		{
			provjera = false;
			for (int i = 0; i < _rezultati.trenutnoEle()-1; i++)
			{
				if (_rezultati.Element2(i) < _rezultati.Element2(i + 1))
				{
					Student zamjena;
					int zamjocj;
					zamjena = _rezultati.Element1(i);
					zamjocj = _rezultati.Element2(i);

					_rezultati.SetElement2(i, _rezultati.Element2(i + 1));
					_rezultati.SetElement2(i + 1, zamjocj);
					
					_rezultati.SetElement1(i, _rezultati.Element1(i + 1));
					_rezultati.SetElement1(i + 1, zamjena);
					provjera = true;
				}
			}
		} while (provjera);
	}
	bool ZakljuciRezultate()
	{
		for (int i = 0; i < _rezultati.trenutnoEle(); i++)
		{
			if (_rezultati.Element2(i) <= 0)
			{
				_rezultati.SetElement2(i, 5);
			}
			if (i == 3)
				return true;
		}
	}
};
const char *crt = "\n--------------------------------------------------\n";
int main() {

#pragma region TestiranjeKolekcije
	Kolekcija<int, double> kolekcija1;
	for (size_t i = 0; i < 5; i++)
		kolekcija1.AddElement(i, i + 0.3);
	cout << kolekcija1 << endl;
	cout << crt;
	Kolekcija<int, double> kolekcija2;
	kolekcija2 = kolekcija1;
	cout << kolekcija2 << endl;
	kolekcija1.RemoveElement(2);
	cout << kolekcija2 << crt;
	if (kolekcija1.trenutnoEle() == kolekcija2.trenutnoEle())
		cout << "ISTI BROJ ELEMENATA" << endl;
	Kolekcija<int, double> kolekcija3(kolekcija2);
	cout << kolekcija3 << crt;
#pragma endregion

#pragma region TestiranjeDatuma
	Datum danas(26, 11, 2015);
	Datum sutra(danas);
	Datum prekosutra;
	prekosutra = danas;
	cout << danas << endl << sutra << endl << prekosutra << crt;
#pragma endregion

#pragma region TestiranjeStudenta
	Student denis("Denis Music", Datum(26, 11, 1990));
	Student jasmin("Jasmin Azemovic", Datum(22, 11, 1990));
	Student goran;
	goran = jasmin;
	Student adel("Adel Handzic", Datum(25, 8, 1990));
	Student marija("Marija Herceg", Datum(15, 6, 1990));
#pragma endregion

#pragma region TestiranjeIspita
	Ispit prIII("PRIII::26.11.2015", danas);
	
	if (prIII.DodajPrijavu(denis, danas))
		cout << denis << " DODAT na spisak" << endl;
	if (prIII.DodajPrijavu(jasmin, danas))
		cout << jasmin << " DODAT na spisak" << endl;
	if (prIII.DodajPrijavu(goran, danas))
		cout << jasmin << " DODAT na spisak" << endl;
	if (prIII.DodajPrijavu(adel, danas))
		cout << adel << " DODAT na spisak" << endl;
	if (prIII.DodajPrijavu(marija, danas))
		cout << adel << " DODAT na spisak" << endl;

	cout << crt << endl;

	prIII.DodajRezultat(goran, 7);
	prIII.DodajRezultat(jasmin, 6);
	prIII.DodajRezultat(adel, 8);
	prIII.DodajRezultat(marija, 9);

	prIII.Sortiraj();
	prIII.ZakljuciRezultate();
	if(prIII.ZakljuciRezultate()==true)
		cout << prIII << crt;

	Ispit prIII_2(prIII);
	cout << prIII_2 << crt;
#pragma endregion
	system("pause>0");
	return 0;
}